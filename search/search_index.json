{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ScriptSharks Exploring the world of dangerous code. \"Every tool is a weapon, if you hold it right.\" ~Ani DiFranco, My I.Q. There's no getting rid of malware. Like the mythical hydra, for every strain we destroy, countless others arise in its place. Ever since John Von Neumann published the Theory of Self-Reproducing Automata in 1966, the state of the art of malware design has exploded in scope and complexity. Originally designed to ease our lives, computers have become weapons in the hands of unscrupulous threat actors. \"If you know the enemy and know yourself, you need not fear the result of a hundred battles.\" ~Sun Tzu, The Art of War ScriptSharks aims to document modern malware design and analysis techniques in the hopes that this information will help defenders to understand and prevent malware attacks in the future. It is currently the work of a single author; as such, it will grow and expand along with the author's own knowledge and skill. News 2022.05.05 We've established the Malware History section, starting with history's earliest malware. Stay tuned for more! 2022.04.30 Today marks the rebirth of ScriptSharks.com! Like a phoenix rising from ashes, except wet, and huge, and with so many teeth... Disclaimer The contents of this repository are provided as-is, without any warranty of any kind. The opinions expressed herein do not necessarily represent the views of the author or their employer. What you do with this information is your responsibility; it is the author's sincere hope that you will use this knowledge for the betterment of humanity.","title":"Home"},{"location":"#scriptsharks","text":"Exploring the world of dangerous code. \"Every tool is a weapon, if you hold it right.\" ~Ani DiFranco, My I.Q. There's no getting rid of malware. Like the mythical hydra, for every strain we destroy, countless others arise in its place. Ever since John Von Neumann published the Theory of Self-Reproducing Automata in 1966, the state of the art of malware design has exploded in scope and complexity. Originally designed to ease our lives, computers have become weapons in the hands of unscrupulous threat actors. \"If you know the enemy and know yourself, you need not fear the result of a hundred battles.\" ~Sun Tzu, The Art of War ScriptSharks aims to document modern malware design and analysis techniques in the hopes that this information will help defenders to understand and prevent malware attacks in the future. It is currently the work of a single author; as such, it will grow and expand along with the author's own knowledge and skill.","title":"ScriptSharks"},{"location":"#news","text":"","title":"News"},{"location":"#20220505","text":"We've established the Malware History section, starting with history's earliest malware. Stay tuned for more!","title":"2022.05.05"},{"location":"#20220430","text":"Today marks the rebirth of ScriptSharks.com! Like a phoenix rising from ashes, except wet, and huge, and with so many teeth...","title":"2022.04.30"},{"location":"#disclaimer","text":"The contents of this repository are provided as-is, without any warranty of any kind. The opinions expressed herein do not necessarily represent the views of the author or their employer. What you do with this information is your responsibility; it is the author's sincere hope that you will use this knowledge for the betterment of humanity.","title":"Disclaimer"},{"location":"0x00%20History/00%20Sipping%20from%20the%20Fire%20Hose/","text":"\"History is the study of all the world's crime.\" ~Voltaire Sipping from the Fire Hose The world is lousy with malware. It seems not a day passes without headlines decrying another ransomware attack, malware strain, or APT group. It can feel overwhelming for users and admins seeking to protect valuable data and assets. For security professionals, staying abreast of the latest developments and trends can seem an impossible task. How did we get here? Where did all this malware come from, and why was it created? What fresh malware does the future have in store, and is there anything we can do to stop it? In pursuit of answers, we should consider not only today's headlines, but the history of malware as a whole\u2014much of which is deeply rooted within a greater geopolitical context. The following sections aim to provide an overview of malware history, from its origins to the present day. The full timeline of malware history is beyond the scope of this website, so we must distill it, curating the most interesting and useful elements for our purpose. We hope you enjoy our selection. Also, much of this information is gathered from Wikipedia , which will make many college professors cringe. To those professors, I say: submit an issue on GitHub if you find a mistake in this content, and if you're feeling really generous, correct the mistake on Wikipedia. (Just be sure to cite a credible source.) Without further ado, let us begin.","title":"Introduction"},{"location":"0x00%20History/00%20Sipping%20from%20the%20Fire%20Hose/#sipping-from-the-fire-hose","text":"The world is lousy with malware. It seems not a day passes without headlines decrying another ransomware attack, malware strain, or APT group. It can feel overwhelming for users and admins seeking to protect valuable data and assets. For security professionals, staying abreast of the latest developments and trends can seem an impossible task. How did we get here? Where did all this malware come from, and why was it created? What fresh malware does the future have in store, and is there anything we can do to stop it? In pursuit of answers, we should consider not only today's headlines, but the history of malware as a whole\u2014much of which is deeply rooted within a greater geopolitical context. The following sections aim to provide an overview of malware history, from its origins to the present day. The full timeline of malware history is beyond the scope of this website, so we must distill it, curating the most interesting and useful elements for our purpose. We hope you enjoy our selection. Also, much of this information is gathered from Wikipedia , which will make many college professors cringe. To those professors, I say: submit an issue on GitHub if you find a mistake in this content, and if you're feeling really generous, correct the mistake on Wikipedia. (Just be sure to cite a credible source.) Without further ado, let us begin.","title":"Sipping from the Fire Hose"},{"location":"0x00%20History/01%20In%20the%20Beginning/","text":"\"I couldn't help thinking how well Cain had prospered after killing his brother: he founded the first city\u2014and, although we don't like to talk about it all that much, we are his children.\" ~Philip Gourevitch, We Wish to Inform You That Tomorrow We Will Be Killed with Our Families Dawn of an Age Long ago, when people wanted to count things, they had to use their fingers. For bigger numbers, they had to use their toes, too, or even borrow the fingers and toes of their neighbors. But this was untenable, so people started carving tallies into sticks and bones. In 2400 BCE, the Babylonians invented what would become the abacus. Around 100 BCE, the Antikythera Mechanism , the oldest example of an analogue computer, was used to predict astronomical events. These humble beginnings triggered humanity's undying hunger for technological advancement, which became the guiding principle behind the current \"smart everything\" era. In their defense, those ancient inventors couldn't have predicted ransomware when they were pushing beads about strings and building tools to track the stars. If you don't keep regular backups of essential data , don't go blaming Babylon when an email attachment wipes your drives. Yes, That von Neumann In 1949, John von Neumann gave a series of lectures about the \"Theory and Organization of Complicated Automata,\" which became the basis for his \"Theory of Self-Reproducing Automata\" , published in 1966. During his lifetime, von Neumann wrote over 150 papers about mathematics, physics and computing, contributed to the Manhattan Project during World War II, and promoted the policy of mutually assured destruction to deter the nuclear arms race. In retrospect, von Neumann's 1966 article may seem one of his less-notable achievements. Yet this paper contributed directly to the invention of the earliest examples of malicious software (the term \"malware\" wasn't coined until the '90s, over 20 years following von Neumann's paper). Creeper and Reaper In 1971, Bob Thomas wrote Creeper , a program designed to test the ideas proposed by von Neumann's article. Creeper migrated across PDP-10 mainframes running TENEX which were connected to ARPANET . Systems infected by Creeper would show the message \"I'M THE CREEPER; CATCH ME IF YOU CAN\" before the malware jumped to a different system on the network. A second variant of Creeper produced by Ray Tomlinson was altered so that instead of moving itself between systems, it would duplicate itself across systems, thus becoming the world's first computer worm. Recognizing the evil he had brought into the world, Tomlinson attempted to re-balance his karmic scales by producing Reaper , a program designed to seek out and destroy the Creeper worm. Unfortunately, Reaper functioned much like Creeper, spreading across PDP-10s on ARPANET. Thus, despite being the world's first anti-virus software, it also became the world's second computer worm, and the first example of software fratricide. Like Cain slaying Abel, the conflict between Reaper and Creeper set the stage for the present-day digital arms race, pitting malware authors against antivirus engineers in a never-ending battle for supremacy. Speaking of battles for digital supremacy, Creeper and Reaper also inspired the creation of Core War in 1984, a computer programming game wherein software \"warriors\" fight for dominance in a virtual computer. Warrior programs were written in \"Redcode,\" a primitive form of Assembly Language designed specifically for the game. Fictionalized versions of Reaper also featured as antagonists in the Japanese anime TV series Digimon . So cool. Wascally Wabbits The first fork bomb dropped in 1974 in the form of \"Wabbit\" (or \"Rabbit,\" depending on who you ask). The program would \"fork\" itself in memory ad infinitum, draining resources until the affected systems ground to a halt. The malware earned its name from the rate at which the program reproduced. Fun trivia: A similar fork bomb plays a significant role in ScriptSharks history! (But that's a story for a different time.) Think of an Animal... In 1975, John Walker created the first Trojan Horse malware as a mechanism for distributing a video game he had designed. The game was called ANIMAL, and was quite the clever iteration upon the old \"guess the animal\" games of the day. John's ANIMAL script included a bunch of nifty tricks that drew inspiration from ELIZA to present a more life-like, adaptive experience. The game was quite popular, and everyone wanted a copy. Rather than write the program to a bunch of drives and shipping them to all his buddies, John took a more creative approach. He created a subroutine, called PERVADE, which ran in the background as users were playing the game. The PERVADE subroutine would scan the system for accessible directories, checking to see whether a copy of ANIMAL existed in that directory. If not, PERVADE would create a copy of the game in that directory. Otherwise, it would check to see if the running version was newer than the saved copy, replacing older versions with newer ones. The trojan spread through the system, gaining greater access as more powerful users played the game. In time, it spread to external media, thus spreading to other systems. Within a month of its release, ANIMAL had spread across numerous Univac computers, eventually making its way to Univac's software development center in Minnesota. Rumor has it, Univac (the organization) inadvertently shipped software distribution tapes which contained ANIMAL. If true, this could be the first instance of a supply-chain attack (though it was, admittedly, unintentional). After recognizing how wide-spread ANIMAL had become, John and his associates considered how they might go about cleaning up the ANIMAL mess. They brainstormed, considered releasing a HUNTER program to spread and destroy the ANIMALs (much like Reaper before it), but in the end the problem was solved without any intervention necessary; Univac released a new Operating System, which handled filesystems in a slightly different manner. The change was minor, but it was enough to break the PERVADE subroutine, thus rendering ANIMAL toothless. End of the Beginning These stories are legends, indicative of the playful nature of early hackers. Many of the \"Old Guard\" reminisce about this era, when hackers were clever pranksters, driven by passion rather than malice. Alas, nothing lasts, and the 1980s witnessed an explosion of the first truly malicious malware in history.","title":"In the Beginning..."},{"location":"0x00%20History/01%20In%20the%20Beginning/#dawn-of-an-age","text":"Long ago, when people wanted to count things, they had to use their fingers. For bigger numbers, they had to use their toes, too, or even borrow the fingers and toes of their neighbors. But this was untenable, so people started carving tallies into sticks and bones. In 2400 BCE, the Babylonians invented what would become the abacus. Around 100 BCE, the Antikythera Mechanism , the oldest example of an analogue computer, was used to predict astronomical events. These humble beginnings triggered humanity's undying hunger for technological advancement, which became the guiding principle behind the current \"smart everything\" era. In their defense, those ancient inventors couldn't have predicted ransomware when they were pushing beads about strings and building tools to track the stars. If you don't keep regular backups of essential data , don't go blaming Babylon when an email attachment wipes your drives.","title":"Dawn of an Age"},{"location":"0x00%20History/01%20In%20the%20Beginning/#yes-that-von-neumann","text":"In 1949, John von Neumann gave a series of lectures about the \"Theory and Organization of Complicated Automata,\" which became the basis for his \"Theory of Self-Reproducing Automata\" , published in 1966. During his lifetime, von Neumann wrote over 150 papers about mathematics, physics and computing, contributed to the Manhattan Project during World War II, and promoted the policy of mutually assured destruction to deter the nuclear arms race. In retrospect, von Neumann's 1966 article may seem one of his less-notable achievements. Yet this paper contributed directly to the invention of the earliest examples of malicious software (the term \"malware\" wasn't coined until the '90s, over 20 years following von Neumann's paper).","title":"Yes, That von Neumann"},{"location":"0x00%20History/01%20In%20the%20Beginning/#creeper-and-reaper","text":"In 1971, Bob Thomas wrote Creeper , a program designed to test the ideas proposed by von Neumann's article. Creeper migrated across PDP-10 mainframes running TENEX which were connected to ARPANET . Systems infected by Creeper would show the message \"I'M THE CREEPER; CATCH ME IF YOU CAN\" before the malware jumped to a different system on the network. A second variant of Creeper produced by Ray Tomlinson was altered so that instead of moving itself between systems, it would duplicate itself across systems, thus becoming the world's first computer worm. Recognizing the evil he had brought into the world, Tomlinson attempted to re-balance his karmic scales by producing Reaper , a program designed to seek out and destroy the Creeper worm. Unfortunately, Reaper functioned much like Creeper, spreading across PDP-10s on ARPANET. Thus, despite being the world's first anti-virus software, it also became the world's second computer worm, and the first example of software fratricide. Like Cain slaying Abel, the conflict between Reaper and Creeper set the stage for the present-day digital arms race, pitting malware authors against antivirus engineers in a never-ending battle for supremacy. Speaking of battles for digital supremacy, Creeper and Reaper also inspired the creation of Core War in 1984, a computer programming game wherein software \"warriors\" fight for dominance in a virtual computer. Warrior programs were written in \"Redcode,\" a primitive form of Assembly Language designed specifically for the game. Fictionalized versions of Reaper also featured as antagonists in the Japanese anime TV series Digimon . So cool.","title":"Creeper and Reaper"},{"location":"0x00%20History/01%20In%20the%20Beginning/#wascally-wabbits","text":"The first fork bomb dropped in 1974 in the form of \"Wabbit\" (or \"Rabbit,\" depending on who you ask). The program would \"fork\" itself in memory ad infinitum, draining resources until the affected systems ground to a halt. The malware earned its name from the rate at which the program reproduced. Fun trivia: A similar fork bomb plays a significant role in ScriptSharks history! (But that's a story for a different time.)","title":"Wascally Wabbits"},{"location":"0x00%20History/01%20In%20the%20Beginning/#think-of-an-animal","text":"In 1975, John Walker created the first Trojan Horse malware as a mechanism for distributing a video game he had designed. The game was called ANIMAL, and was quite the clever iteration upon the old \"guess the animal\" games of the day. John's ANIMAL script included a bunch of nifty tricks that drew inspiration from ELIZA to present a more life-like, adaptive experience. The game was quite popular, and everyone wanted a copy. Rather than write the program to a bunch of drives and shipping them to all his buddies, John took a more creative approach. He created a subroutine, called PERVADE, which ran in the background as users were playing the game. The PERVADE subroutine would scan the system for accessible directories, checking to see whether a copy of ANIMAL existed in that directory. If not, PERVADE would create a copy of the game in that directory. Otherwise, it would check to see if the running version was newer than the saved copy, replacing older versions with newer ones. The trojan spread through the system, gaining greater access as more powerful users played the game. In time, it spread to external media, thus spreading to other systems. Within a month of its release, ANIMAL had spread across numerous Univac computers, eventually making its way to Univac's software development center in Minnesota. Rumor has it, Univac (the organization) inadvertently shipped software distribution tapes which contained ANIMAL. If true, this could be the first instance of a supply-chain attack (though it was, admittedly, unintentional). After recognizing how wide-spread ANIMAL had become, John and his associates considered how they might go about cleaning up the ANIMAL mess. They brainstormed, considered releasing a HUNTER program to spread and destroy the ANIMALs (much like Reaper before it), but in the end the problem was solved without any intervention necessary; Univac released a new Operating System, which handled filesystems in a slightly different manner. The change was minor, but it was enough to break the PERVADE subroutine, thus rendering ANIMAL toothless.","title":"Think of an Animal..."},{"location":"0x00%20History/01%20In%20the%20Beginning/#end-of-the-beginning","text":"These stories are legends, indicative of the playful nature of early hackers. Many of the \"Old Guard\" reminisce about this era, when hackers were clever pranksters, driven by passion rather than malice. Alas, nothing lasts, and the 1980s witnessed an explosion of the first truly malicious malware in history.","title":"End of the Beginning"},{"location":"0xFF%20About/00%20Changelog/","text":"Version 0.1.2 Expanded \"In the Beginning\" section. Added \"Wabbit\" and \"Animal.\" Cited Wikipedia in the Introduction. Included link for reporting issues. Version 0.1.1 Fixed Bugs. Incorrect version number in page header. Broken bullet hierarchy in Changelog. Updated Changelog Organization. Version 0.1.0 Created History Section. Added Introduction: \"Sipping from the Fire Hose.\" Added Sub-Section 1: \"In the Beginning.\" Updated Project Organization. Introduced hex-based subject hierarchy. Renamed files to suit new scheme. Added basic metadata to Markdown files. Version 0.0.1 Initial content and configuration. Index page outlines project intentions. Changelog tracks revisions. License links to Creative Commons license information.","title":"Changelog"},{"location":"0xFF%20About/00%20Changelog/#version-012","text":"Expanded \"In the Beginning\" section. Added \"Wabbit\" and \"Animal.\" Cited Wikipedia in the Introduction. Included link for reporting issues.","title":"Version 0.1.2"},{"location":"0xFF%20About/00%20Changelog/#version-011","text":"Fixed Bugs. Incorrect version number in page header. Broken bullet hierarchy in Changelog. Updated Changelog Organization.","title":"Version 0.1.1"},{"location":"0xFF%20About/00%20Changelog/#version-010","text":"Created History Section. Added Introduction: \"Sipping from the Fire Hose.\" Added Sub-Section 1: \"In the Beginning.\" Updated Project Organization. Introduced hex-based subject hierarchy. Renamed files to suit new scheme. Added basic metadata to Markdown files.","title":"Version 0.1.0"},{"location":"0xFF%20About/00%20Changelog/#version-001","text":"Initial content and configuration. Index page outlines project intentions. Changelog tracks revisions. License links to Creative Commons license information.","title":"Version 0.0.1"},{"location":"0xFF%20About/01%20License/","text":"This work is licensed under a Creative Commons Attribution 4.0 International License . The author has granted others the freedom to share and adapt this work as long as they respect the terms of the aforementioned license, as detailed in the official text of the license .","title":"License"}]}