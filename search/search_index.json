{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ScriptSharks Exploring the world of dangerous code. \"Every tool is a weapon, if you hold it right.\" ~Ani DiFranco, My I.Q. There's no getting rid of malware. Like the mythical hydra, for every strain we destroy, countless others arise in its place. Ever since John Von Neumann published the Theory of Self-Reproducing Automata in 1966, the state of the art of malware design has exploded in scope and complexity. Originally designed to ease our lives, computers have become weapons in the hands of unscrupulous threat actors. \"If you know the enemy and know yourself, you need not fear the result of a hundred battles.\" ~Sun Tzu, The Art of War ScriptSharks aims to document the art and history of malware design and analysis, in the hopes that this information will help defenders to understand and prevent malware attacks in the future. It is currently the work of a single author; as such, it will grow and expand along with the author's own knowledge and skill. News 2022.08.24 I added Millenial Malware to the history section. Spoiler: It's just so many worms, all over the place... 2022.08.23 After considerable reader feedback, I've finally added the ScriptSharks.com Origin Story . Check it out to learn about the site's history! 2022.08.09 The Malware History project continues with our exploration of the 90s and the escalation of the digital arms race! 2022.05.11 After exploring malware's early days , witness the malware explosion of the 80s in the latest Malware History section! 2022.05.05 We've established the Malware History section, starting with history's earliest malware. Stay tuned for more! Archives Visit the old news page for older updates. Disclaimer The contents of this repository are provided as-is, without any warranty of any kind. The opinions expressed herein do not necessarily represent the views of the author or their employer. What you do with this information is your responsibility; it is the author's sincere hope that you will use this knowledge for the betterment of humanity.","title":"Home"},{"location":"#scriptsharks","text":"Exploring the world of dangerous code. \"Every tool is a weapon, if you hold it right.\" ~Ani DiFranco, My I.Q. There's no getting rid of malware. Like the mythical hydra, for every strain we destroy, countless others arise in its place. Ever since John Von Neumann published the Theory of Self-Reproducing Automata in 1966, the state of the art of malware design has exploded in scope and complexity. Originally designed to ease our lives, computers have become weapons in the hands of unscrupulous threat actors. \"If you know the enemy and know yourself, you need not fear the result of a hundred battles.\" ~Sun Tzu, The Art of War ScriptSharks aims to document the art and history of malware design and analysis, in the hopes that this information will help defenders to understand and prevent malware attacks in the future. It is currently the work of a single author; as such, it will grow and expand along with the author's own knowledge and skill.","title":"ScriptSharks"},{"location":"#news","text":"","title":"News"},{"location":"#20220824","text":"I added Millenial Malware to the history section. Spoiler: It's just so many worms, all over the place...","title":"2022.08.24"},{"location":"#20220823","text":"After considerable reader feedback, I've finally added the ScriptSharks.com Origin Story . Check it out to learn about the site's history!","title":"2022.08.23"},{"location":"#20220809","text":"The Malware History project continues with our exploration of the 90s and the escalation of the digital arms race!","title":"2022.08.09"},{"location":"#20220511","text":"After exploring malware's early days , witness the malware explosion of the 80s in the latest Malware History section!","title":"2022.05.11"},{"location":"#20220505","text":"We've established the Malware History section, starting with history's earliest malware. Stay tuned for more!","title":"2022.05.05"},{"location":"#archives","text":"Visit the old news page for older updates.","title":"Archives"},{"location":"#disclaimer","text":"The contents of this repository are provided as-is, without any warranty of any kind. The opinions expressed herein do not necessarily represent the views of the author or their employer. What you do with this information is your responsibility; it is the author's sincere hope that you will use this knowledge for the betterment of humanity.","title":"Disclaimer"},{"location":"old%20news/","text":"Old News 2022.04.30 Today marks the rebirth of ScriptSharks.com! Like a phoenix rising from ashes, except wet, and huge, and with so many teeth...","title":"Old News"},{"location":"old%20news/#20220430","text":"Today marks the rebirth of ScriptSharks.com! Like a phoenix rising from ashes, except wet, and huge, and with so many teeth...","title":"2022.04.30"},{"location":"0x00%20History/00%20Sipping%20from%20the%20Fire%20Hose/","text":"\"History is the study of all the world's crime.\" ~Voltaire Sipping from the Fire Hose The world is lousy with malware. It seems not a day passes without headlines decrying another ransomware attack, malware strain, or APT group. It can feel overwhelming for users and admins seeking to protect valuable data and assets. For security professionals, staying abreast of the latest developments and trends can seem an impossible task. How did we get here? Where did all this malware come from, and why was it created? What fresh malware does the future have in store, and is there anything we can do to stop it? In pursuit of answers, we should consider not only today's headlines, but the history of malware as a whole\u2014much of which is deeply rooted within a greater geopolitical context. The following sections aim to provide an overview of malware history, from its origins to the present day. The full timeline of malware history is beyond the scope of this website, so we must distill it, curating the most interesting and useful elements for our purpose. We hope you enjoy our selection. Also, much of this information is gathered from Wikipedia , which will make many college professors cringe. To those professors, I say: submit an issue on GitHub if you find a mistake in this content, and if you're feeling really generous, correct the mistake on Wikipedia. (Just be sure to cite a credible source.) Without further ado, let us begin.","title":"Introduction"},{"location":"0x00%20History/00%20Sipping%20from%20the%20Fire%20Hose/#sipping-from-the-fire-hose","text":"The world is lousy with malware. It seems not a day passes without headlines decrying another ransomware attack, malware strain, or APT group. It can feel overwhelming for users and admins seeking to protect valuable data and assets. For security professionals, staying abreast of the latest developments and trends can seem an impossible task. How did we get here? Where did all this malware come from, and why was it created? What fresh malware does the future have in store, and is there anything we can do to stop it? In pursuit of answers, we should consider not only today's headlines, but the history of malware as a whole\u2014much of which is deeply rooted within a greater geopolitical context. The following sections aim to provide an overview of malware history, from its origins to the present day. The full timeline of malware history is beyond the scope of this website, so we must distill it, curating the most interesting and useful elements for our purpose. We hope you enjoy our selection. Also, much of this information is gathered from Wikipedia , which will make many college professors cringe. To those professors, I say: submit an issue on GitHub if you find a mistake in this content, and if you're feeling really generous, correct the mistake on Wikipedia. (Just be sure to cite a credible source.) Without further ado, let us begin.","title":"Sipping from the Fire Hose"},{"location":"0x00%20History/01%20In%20the%20Beginning/","text":"\"I couldn't help thinking how well Cain had prospered after killing his brother: he founded the first city\u2014and, although we don't like to talk about it all that much, we are his children.\" ~Philip Gourevitch, We Wish to Inform You That Tomorrow We Will Be Killed with Our Families Dawn of an Age Long ago, when people wanted to count things, they had to use their fingers. For bigger numbers, they had to use their toes, too, or even borrow the fingers and toes of their neighbors. But this was untenable, so people started carving tallies into sticks and bones. In 2400 BCE, the Babylonians invented what would become the abacus. Around 100 BCE, the Antikythera Mechanism , the oldest example of an analogue computer, was used to predict astronomical events. These humble beginnings triggered humanity's undying hunger for technological advancement, which became the guiding principle behind the current \"smart everything\" era. In their defense, those ancient inventors couldn't have predicted ransomware when they were pushing beads about strings and building tools to track the stars. If you don't keep regular backups of essential data , don't go blaming Babylon when an email attachment wipes your drives. Yes, That von Neumann In 1949, John von Neumann gave a series of lectures about the \"Theory and Organization of Complicated Automata,\" which became the basis for his \"Theory of Self-Reproducing Automata\" , published in 1966. During his lifetime, von Neumann wrote over 150 papers about mathematics, physics and computing, contributed to the Manhattan Project during World War II, and promoted the policy of mutually assured destruction to deter the nuclear arms race. In retrospect, von Neumann's 1966 article may seem one of his less-notable achievements. Yet this paper contributed directly to the invention of the earliest examples of malicious software (the term \"malware\" wasn't coined until the '90s, over 20 years following von Neumann's paper). Creeper and Reaper In 1971, Bob Thomas wrote Creeper , a program designed to test the ideas proposed by von Neumann's article. Creeper migrated across PDP-10 mainframes running TENEX which were connected to ARPANET . Systems infected by Creeper would show the message \"I'M THE CREEPER; CATCH ME IF YOU CAN\" before the malware jumped to a different system on the network. A second variant of Creeper produced by Ray Tomlinson was altered so that instead of moving itself between systems, it would duplicate itself across systems, thus becoming the world's first computer worm. Recognizing the evil he had brought into the world, Tomlinson attempted to re-balance his karmic scales by producing Reaper , a program designed to seek out and destroy the Creeper worm. Unfortunately, Reaper functioned much like Creeper, spreading across PDP-10s on ARPANET. Thus, despite being the world's first anti-virus software, it also became the world's second computer worm, and the first example of software fratricide. Like Cain slaying Abel, the conflict between Reaper and Creeper set the stage for the present-day digital arms race, pitting malware authors against antivirus engineers in a never-ending battle for supremacy. Speaking of battles for digital supremacy, Creeper and Reaper also inspired the creation of Core War in 1984, a computer programming game wherein software \"warriors\" fight for dominance in a virtual computer. Warrior programs were written in \"Redcode,\" a primitive form of Assembly Language designed specifically for the game. Fictionalized versions of Reaper also featured as antagonists in the Japanese anime TV series Digimon . So cool. Wascally Wabbits The first fork bomb dropped in 1974 in the form of \"Wabbit\" (or \"Rabbit,\" depending on who you ask). The program would \"fork\" itself in memory ad infinitum, draining resources until the affected systems ground to a halt. The malware earned its name from the rate at which the program reproduced. Fun trivia: A similar fork bomb plays a significant role in ScriptSharks history! (But that's a story for a different time.) Think of an Animal... In 1975, John Walker created the first Trojan Horse malware as a mechanism for distributing a video game he had designed. The game was called ANIMAL, and was quite the clever iteration upon the old \"guess the animal\" games of the day. John's ANIMAL script included a bunch of nifty tricks that drew inspiration from ELIZA to present a more life-like, adaptive experience. The game was quite popular, and everyone wanted a copy. Rather than write the program to a bunch of drives and shipping them to all his buddies, John took a more creative approach. He created a subroutine, called PERVADE, which ran in the background as users were playing the game. The PERVADE subroutine would scan the system for accessible directories, checking to see whether a copy of ANIMAL existed in that directory. If not, PERVADE would create a copy of the game in that directory. Otherwise, it would check to see if the running version was newer than the saved copy, replacing older versions with newer ones. The trojan spread through the system, gaining greater access as more powerful users played the game. In time, it spread to external media, thus spreading to other systems. Within a month of its release, ANIMAL had spread across numerous Univac computers, eventually making its way to Univac's software development center in Minnesota. Rumor has it, Univac (the organization) inadvertently shipped software distribution tapes which contained ANIMAL. If true, this could be the first instance of a supply-chain attack (though it was, admittedly, unintentional). After recognizing how wide-spread ANIMAL had become, John and his associates considered how they might go about cleaning up the ANIMAL mess. They brainstormed, considered releasing a HUNTER program to spread and destroy the ANIMALs (much like Reaper before it), but in the end the problem was solved without any intervention necessary; Univac released a new Operating System, which handled filesystems in a slightly different manner. The change was minor, but it was enough to break the PERVADE subroutine, thus rendering ANIMAL toothless. End of the Beginning These stories are legends, indicative of the playful nature of early hackers. Many of the \"Old Guard\" reminisce about this era, when hackers were clever pranksters, driven by passion rather than malice. Alas, nothing lasts, and the 1980s witnessed an explosion of the first truly malicious malware in history.","title":"In the Beginning..."},{"location":"0x00%20History/01%20In%20the%20Beginning/#dawn-of-an-age","text":"Long ago, when people wanted to count things, they had to use their fingers. For bigger numbers, they had to use their toes, too, or even borrow the fingers and toes of their neighbors. But this was untenable, so people started carving tallies into sticks and bones. In 2400 BCE, the Babylonians invented what would become the abacus. Around 100 BCE, the Antikythera Mechanism , the oldest example of an analogue computer, was used to predict astronomical events. These humble beginnings triggered humanity's undying hunger for technological advancement, which became the guiding principle behind the current \"smart everything\" era. In their defense, those ancient inventors couldn't have predicted ransomware when they were pushing beads about strings and building tools to track the stars. If you don't keep regular backups of essential data , don't go blaming Babylon when an email attachment wipes your drives.","title":"Dawn of an Age"},{"location":"0x00%20History/01%20In%20the%20Beginning/#yes-that-von-neumann","text":"In 1949, John von Neumann gave a series of lectures about the \"Theory and Organization of Complicated Automata,\" which became the basis for his \"Theory of Self-Reproducing Automata\" , published in 1966. During his lifetime, von Neumann wrote over 150 papers about mathematics, physics and computing, contributed to the Manhattan Project during World War II, and promoted the policy of mutually assured destruction to deter the nuclear arms race. In retrospect, von Neumann's 1966 article may seem one of his less-notable achievements. Yet this paper contributed directly to the invention of the earliest examples of malicious software (the term \"malware\" wasn't coined until the '90s, over 20 years following von Neumann's paper).","title":"Yes, That von Neumann"},{"location":"0x00%20History/01%20In%20the%20Beginning/#creeper-and-reaper","text":"In 1971, Bob Thomas wrote Creeper , a program designed to test the ideas proposed by von Neumann's article. Creeper migrated across PDP-10 mainframes running TENEX which were connected to ARPANET . Systems infected by Creeper would show the message \"I'M THE CREEPER; CATCH ME IF YOU CAN\" before the malware jumped to a different system on the network. A second variant of Creeper produced by Ray Tomlinson was altered so that instead of moving itself between systems, it would duplicate itself across systems, thus becoming the world's first computer worm. Recognizing the evil he had brought into the world, Tomlinson attempted to re-balance his karmic scales by producing Reaper , a program designed to seek out and destroy the Creeper worm. Unfortunately, Reaper functioned much like Creeper, spreading across PDP-10s on ARPANET. Thus, despite being the world's first anti-virus software, it also became the world's second computer worm, and the first example of software fratricide. Like Cain slaying Abel, the conflict between Reaper and Creeper set the stage for the present-day digital arms race, pitting malware authors against antivirus engineers in a never-ending battle for supremacy. Speaking of battles for digital supremacy, Creeper and Reaper also inspired the creation of Core War in 1984, a computer programming game wherein software \"warriors\" fight for dominance in a virtual computer. Warrior programs were written in \"Redcode,\" a primitive form of Assembly Language designed specifically for the game. Fictionalized versions of Reaper also featured as antagonists in the Japanese anime TV series Digimon . So cool.","title":"Creeper and Reaper"},{"location":"0x00%20History/01%20In%20the%20Beginning/#wascally-wabbits","text":"The first fork bomb dropped in 1974 in the form of \"Wabbit\" (or \"Rabbit,\" depending on who you ask). The program would \"fork\" itself in memory ad infinitum, draining resources until the affected systems ground to a halt. The malware earned its name from the rate at which the program reproduced. Fun trivia: A similar fork bomb plays a significant role in ScriptSharks history! (But that's a story for a different time.)","title":"Wascally Wabbits"},{"location":"0x00%20History/01%20In%20the%20Beginning/#think-of-an-animal","text":"In 1975, John Walker created the first Trojan Horse malware as a mechanism for distributing a video game he had designed. The game was called ANIMAL, and was quite the clever iteration upon the old \"guess the animal\" games of the day. John's ANIMAL script included a bunch of nifty tricks that drew inspiration from ELIZA to present a more life-like, adaptive experience. The game was quite popular, and everyone wanted a copy. Rather than write the program to a bunch of drives and shipping them to all his buddies, John took a more creative approach. He created a subroutine, called PERVADE, which ran in the background as users were playing the game. The PERVADE subroutine would scan the system for accessible directories, checking to see whether a copy of ANIMAL existed in that directory. If not, PERVADE would create a copy of the game in that directory. Otherwise, it would check to see if the running version was newer than the saved copy, replacing older versions with newer ones. The trojan spread through the system, gaining greater access as more powerful users played the game. In time, it spread to external media, thus spreading to other systems. Within a month of its release, ANIMAL had spread across numerous Univac computers, eventually making its way to Univac's software development center in Minnesota. Rumor has it, Univac (the organization) inadvertently shipped software distribution tapes which contained ANIMAL. If true, this could be the first instance of a supply-chain attack (though it was, admittedly, unintentional). After recognizing how wide-spread ANIMAL had become, John and his associates considered how they might go about cleaning up the ANIMAL mess. They brainstormed, considered releasing a HUNTER program to spread and destroy the ANIMALs (much like Reaper before it), but in the end the problem was solved without any intervention necessary; Univac released a new Operating System, which handled filesystems in a slightly different manner. The change was minor, but it was enough to break the PERVADE subroutine, thus rendering ANIMAL toothless.","title":"Think of an Animal..."},{"location":"0x00%20History/01%20In%20the%20Beginning/#end-of-the-beginning","text":"These stories are legends, indicative of the playful nature of early hackers. Many of the \"Old Guard\" reminisce about this era, when hackers were clever pranksters, driven by passion rather than malice. Alas, nothing lasts, and the 1980s witnessed an explosion of the first truly malicious malware in history.","title":"End of the Beginning"},{"location":"0x00%20History/02%20Malware%20Explosion/","text":"\"Ours is a world of nuclear giants and ethical infants. We know more about war than we know about peace, more about killing than we know about living. If we continue to develop our technology without wisdom or prudence, our servant may prove to be our executioner.\" ~ Omar Bradley , Armistice Day Speech , 1948 The PC Revolution In the early 1970s, computer manufacturers felt that the personal-use \"microcomputer\" market was too small to be profitable. Microprocessors were invented by Intel in 1971, but without hardware suppliers, computer enthusiasts had no way to put the chips to use. In 1974, Ed Roberts and his company, MITS , developed the first commercially-successful microcomputer, the Altair 8800 , which was featured on the January 1975 cover of Popular Electronics magazine. The computer was sold as a kit for $397 (about $2,133 in 2022), and though it required significant technical knowledge (and did not ship pre-assembled), the kit sold thousands of orders in the first few weeks, sparking the first flames of the Personal Computer (PC) revolution. The first mass-produced PCs came in 1977 with the release of the Apple II , Commodore's PET 2001 and Tandy's TRS-80 , deemed the \"1977 Trinity.\" With relatively simple programming languages and budget-friendly price-points, these systems significantly lowered the barrier to entry for computer technology. What had once been the purview of Governments, Corporations and Universities was now in the hands of a booming population of hobbyists, who turned their hobby into a booming new industry practically overnight. In the 1980s, as Bill Gates envisioned \"a computer on every desk and in every home,\" the ever-greater ubiquity of PCs led to a malware renaissance; what had once been simple experiments and pranks evolved into wide-spread, destructive attacks. Pandora's Box had been opened, and could not be closed again. Elk Cloner and Brain As with its predecessors, the first major PC malware was written as a prank, designed by 15-year-old Rich Skrenta in 1982. The malware, known as Elk Cloner , was the first \"boot-sector virus\" in history, spreading across Apple II systems by infecting the boot sectors of floppy disks. When users booted their systems using an infected disk, they would inadvertently launch the virus, which would then infect every subsequent disk inserted into the computer, marking each infected disk with a \"signature\" byte, so it wouldn't reinfect the disk a second time. As with ANIMAL, Elk Cloner was first distributed alongside game software. Elk Cloner was incredibly contagious, spreading further than Skrenta ever imagined (or intended), largely due to users' ignorance regarding the threat of untrusted storage media. This is regarded the first large-scale computer virus outbreak in history. Recovery from the virus was somewhat difficult, as it required re-writing the boot sector of affected disks, often causing data loss. Innoculation was somewhat simpler, merely requiring a specific \"signature\" byte to be written to the disk. When Elk Cloner checked the disk to see whether it was infected, it would see the \"signature\" byte and skip the infection process. Four years later, \" Brain \" (another boot-sector virus) became the first IBM PC virus, working in a similar fashion to Elk Cloner. Originally designed as an anti-piracy measure, Brain infected the boot sector of floppy disks, replacing the original data with a message intended to scare users of pirated software into contacting the developers and obtaining a legitimate copy. Brain's authors included their address and phone numbers, which were soon inundated with messages from angry users worldwide who wanted the virus removed from their systems. One writer's account cited reports that over 100,000 disks were infected worldwide . That's a lot of phone calls... Agents of Chaos In December of 1986, Ralf Burger\u2014author of Computer Viruses: A High-Tech Disease \u2014created Virdem , the first file-based virus for DOS. When executed, Virdem scans nearby directories for uninfected COM files , then infects each file found with a copy of itself. It overwrites the beginning of the .com file with a jump to the end, where it appends and passes control to a duplicate of its own code, before jumping back to the original code's entry point. This technique ensures the original code still runs unimpaired, but only after the virus spreads. Virdem's official release included a guessing-game, played with the user while it infected their files. Like Brain, the virus included a message with the author's name and phone number. Ralf presented Virdem\u2014with German and English translations\u2014at the Chaos Computer Club ( CCC ) in Germany. His presentation inspired a host of variants, many of which omitted the guessing game entirely, or added other functionality. These variants continued evolving and spreading as late as 1993. The Infection Spreads 1987 brought a host of new malware: Vienna, which appeared and then was neutralized\u2014a first for the IBM platform. Lehigh, which infected command.com on DOS systems, stopped on-campus at its namesake university before it could spread \"into the wild.\" A barrage of boot-sector viruses: Yale from the US, Stoned from New Zealand, and Ping-Pong from Italy. The first self-encrypting virus file, Cascade , which led IBM to develop its own antivirus products. The pace continued in 1988: Ping-Pong infected the University of Turin in Italy. The Festering Hate viruses for Apple ProDOS spread throughout infected systems, then destroyed all files once they could no longer spread. Festering Hate was based on CyberAIDS, about which \"The Plague\"\u2014of Masters of Deception (MOD) fame\u2014published an article in the Summer 1998 issue of 2600 Magazine . In their article, The Plague referenced previously-unknown pseudonyms for other MOD members, including \"Cereal Killer\" and \"Rancid Grapefruit.\" Rafael Moreu's 1995 film, Hackers , nods to MOD by naming two characters after The Plague and Cereal Killer. Fun Fact: This is every hacker's favorite movie, no matter how hard they deny it. Ask them. They'll deny it. Not Fun Fact: Festering Hate was not the last file-destruction malware ever to be written. The Morris Worm becomes the first worm to spread \"in the wild,\" infecting BSD hosts across the Internet by exploiting buffer overflow vulnerabilities. Its author, Robert Morris , launched the malware from MIT computer systems while he was a graduate student at Cornell. He created the worm to see if it could be done, and launched it from MIT in the hopes that it would help his chances of studying there instead of Cornell. Despite his benign intentions, Morris caused up to $10 million in damage. He became the first felon convicted under the Computer Fraud and Abuse Act of 1986 . He received the following punishments for his crimes: Three years' probation 400 hours of community service Just over $13,000 in fines Becoming a tenured professor at MIT Wealth, Fame and Success Moral of the story: Crime doesn't pay. Except when it does. In December, scientists in Switzerland sent a Christmas greeting to their friends at NASA in the form of the \" Father Christmas \" worm. NASA was not amused. In '89, malware authors kicked it up a notch: Ghostball , the first known multipartite virus . At a time when most viruses chose to infect either files or boot sectors, Ghostball asked: \" \u00bfPor qu\u00e9 no los dos? \" They took the best parts of Vienna and Ping-Pong and created a monster. The AIDS Trojan became the first ransomware in history. The trojan scrambled directory and filename structures, but didn't actually encrypt the files. The ransom note requested users to send money to a P.O. box in Panama. Its creator, Dr. Joseph Popp, intended to donate the proceeds to AIDS research. Popp was detained in London, and later released to the United States. Cyberpunk's Not Dead The 80s was a warning, a shot across the digital bow, a bitter taste of things to come. It spoke to authors like William Gibson , Bruce Sterling and Bruce Bethke , mainstays of the Cyberpunk genre. Originally coined by Bethke , the word \"Cyberpunk\" became a banner beneath which artists expressed dire predictions about high-tech, dystopian futures. As Bill Gates espoused his vision for the future, the Cyberpunks asked: \"When computers are weapons, do we really want one on every desk and in every home?\"","title":"Malware Explosion"},{"location":"0x00%20History/02%20Malware%20Explosion/#the-pc-revolution","text":"In the early 1970s, computer manufacturers felt that the personal-use \"microcomputer\" market was too small to be profitable. Microprocessors were invented by Intel in 1971, but without hardware suppliers, computer enthusiasts had no way to put the chips to use. In 1974, Ed Roberts and his company, MITS , developed the first commercially-successful microcomputer, the Altair 8800 , which was featured on the January 1975 cover of Popular Electronics magazine. The computer was sold as a kit for $397 (about $2,133 in 2022), and though it required significant technical knowledge (and did not ship pre-assembled), the kit sold thousands of orders in the first few weeks, sparking the first flames of the Personal Computer (PC) revolution. The first mass-produced PCs came in 1977 with the release of the Apple II , Commodore's PET 2001 and Tandy's TRS-80 , deemed the \"1977 Trinity.\" With relatively simple programming languages and budget-friendly price-points, these systems significantly lowered the barrier to entry for computer technology. What had once been the purview of Governments, Corporations and Universities was now in the hands of a booming population of hobbyists, who turned their hobby into a booming new industry practically overnight. In the 1980s, as Bill Gates envisioned \"a computer on every desk and in every home,\" the ever-greater ubiquity of PCs led to a malware renaissance; what had once been simple experiments and pranks evolved into wide-spread, destructive attacks. Pandora's Box had been opened, and could not be closed again.","title":"The PC Revolution"},{"location":"0x00%20History/02%20Malware%20Explosion/#elk-cloner-and-brain","text":"As with its predecessors, the first major PC malware was written as a prank, designed by 15-year-old Rich Skrenta in 1982. The malware, known as Elk Cloner , was the first \"boot-sector virus\" in history, spreading across Apple II systems by infecting the boot sectors of floppy disks. When users booted their systems using an infected disk, they would inadvertently launch the virus, which would then infect every subsequent disk inserted into the computer, marking each infected disk with a \"signature\" byte, so it wouldn't reinfect the disk a second time. As with ANIMAL, Elk Cloner was first distributed alongside game software. Elk Cloner was incredibly contagious, spreading further than Skrenta ever imagined (or intended), largely due to users' ignorance regarding the threat of untrusted storage media. This is regarded the first large-scale computer virus outbreak in history. Recovery from the virus was somewhat difficult, as it required re-writing the boot sector of affected disks, often causing data loss. Innoculation was somewhat simpler, merely requiring a specific \"signature\" byte to be written to the disk. When Elk Cloner checked the disk to see whether it was infected, it would see the \"signature\" byte and skip the infection process. Four years later, \" Brain \" (another boot-sector virus) became the first IBM PC virus, working in a similar fashion to Elk Cloner. Originally designed as an anti-piracy measure, Brain infected the boot sector of floppy disks, replacing the original data with a message intended to scare users of pirated software into contacting the developers and obtaining a legitimate copy. Brain's authors included their address and phone numbers, which were soon inundated with messages from angry users worldwide who wanted the virus removed from their systems. One writer's account cited reports that over 100,000 disks were infected worldwide . That's a lot of phone calls...","title":"Elk Cloner and Brain"},{"location":"0x00%20History/02%20Malware%20Explosion/#agents-of-chaos","text":"In December of 1986, Ralf Burger\u2014author of Computer Viruses: A High-Tech Disease \u2014created Virdem , the first file-based virus for DOS. When executed, Virdem scans nearby directories for uninfected COM files , then infects each file found with a copy of itself. It overwrites the beginning of the .com file with a jump to the end, where it appends and passes control to a duplicate of its own code, before jumping back to the original code's entry point. This technique ensures the original code still runs unimpaired, but only after the virus spreads. Virdem's official release included a guessing-game, played with the user while it infected their files. Like Brain, the virus included a message with the author's name and phone number. Ralf presented Virdem\u2014with German and English translations\u2014at the Chaos Computer Club ( CCC ) in Germany. His presentation inspired a host of variants, many of which omitted the guessing game entirely, or added other functionality. These variants continued evolving and spreading as late as 1993.","title":"Agents of Chaos"},{"location":"0x00%20History/02%20Malware%20Explosion/#the-infection-spreads","text":"1987 brought a host of new malware: Vienna, which appeared and then was neutralized\u2014a first for the IBM platform. Lehigh, which infected command.com on DOS systems, stopped on-campus at its namesake university before it could spread \"into the wild.\" A barrage of boot-sector viruses: Yale from the US, Stoned from New Zealand, and Ping-Pong from Italy. The first self-encrypting virus file, Cascade , which led IBM to develop its own antivirus products. The pace continued in 1988: Ping-Pong infected the University of Turin in Italy. The Festering Hate viruses for Apple ProDOS spread throughout infected systems, then destroyed all files once they could no longer spread. Festering Hate was based on CyberAIDS, about which \"The Plague\"\u2014of Masters of Deception (MOD) fame\u2014published an article in the Summer 1998 issue of 2600 Magazine . In their article, The Plague referenced previously-unknown pseudonyms for other MOD members, including \"Cereal Killer\" and \"Rancid Grapefruit.\" Rafael Moreu's 1995 film, Hackers , nods to MOD by naming two characters after The Plague and Cereal Killer. Fun Fact: This is every hacker's favorite movie, no matter how hard they deny it. Ask them. They'll deny it. Not Fun Fact: Festering Hate was not the last file-destruction malware ever to be written. The Morris Worm becomes the first worm to spread \"in the wild,\" infecting BSD hosts across the Internet by exploiting buffer overflow vulnerabilities. Its author, Robert Morris , launched the malware from MIT computer systems while he was a graduate student at Cornell. He created the worm to see if it could be done, and launched it from MIT in the hopes that it would help his chances of studying there instead of Cornell. Despite his benign intentions, Morris caused up to $10 million in damage. He became the first felon convicted under the Computer Fraud and Abuse Act of 1986 . He received the following punishments for his crimes: Three years' probation 400 hours of community service Just over $13,000 in fines Becoming a tenured professor at MIT Wealth, Fame and Success Moral of the story: Crime doesn't pay. Except when it does. In December, scientists in Switzerland sent a Christmas greeting to their friends at NASA in the form of the \" Father Christmas \" worm. NASA was not amused. In '89, malware authors kicked it up a notch: Ghostball , the first known multipartite virus . At a time when most viruses chose to infect either files or boot sectors, Ghostball asked: \" \u00bfPor qu\u00e9 no los dos? \" They took the best parts of Vienna and Ping-Pong and created a monster. The AIDS Trojan became the first ransomware in history. The trojan scrambled directory and filename structures, but didn't actually encrypt the files. The ransom note requested users to send money to a P.O. box in Panama. Its creator, Dr. Joseph Popp, intended to donate the proceeds to AIDS research. Popp was detained in London, and later released to the United States.","title":"The Infection Spreads"},{"location":"0x00%20History/02%20Malware%20Explosion/#cyberpunks-not-dead","text":"The 80s was a warning, a shot across the digital bow, a bitter taste of things to come. It spoke to authors like William Gibson , Bruce Sterling and Bruce Bethke , mainstays of the Cyberpunk genre. Originally coined by Bethke , the word \"Cyberpunk\" became a banner beneath which artists expressed dire predictions about high-tech, dystopian futures. As Bill Gates espoused his vision for the future, the Cyberpunks asked: \"When computers are weapons, do we really want one on every desk and in every home?\"","title":"Cyberpunk's Not Dead"},{"location":"0x00%20History/03%20The%2090s/","text":"\"Microsoft is now talking about the digital nervous system... I guess I would be nervous if my system was built on their technology too.\" ~ Scott McNealy , Co-Founder of Sun Microsystems Viruses, Evolved In 1990, Mark Washburn developed the first family of polymorphic viruses , known as Chameleon. These viruses could alter their machine-language code (and thus their digital \"fingerprint\") without altering the functionality of the virus. This effect was achieved by packing the viral core into a wrapper using randomized encryption algorithms and keys. Washburn designed the first of these viruses, 1260 (otherwise known as V2PX), after studying the Vienna Virus's disassembled source code, published by Ralf Burger (of Virdem fame). AntiVirus (AV) software was in its infancy at this time, and many early AV engines used hash-based detection. Polymorphism enabled malware to evade these hash-based engines, triggering a digital \"arms race.\" AV vendors scrambled to develop new detection methods, which drove malware authors to develop new evasion techniques, which drove new detection methods, and so on. This cycle continues to this day. Michaelangelo In 1991, Australian researchers discovered the Michaelangelo Virus , designed to infect DOS machines. The virus operated on the BIOS level, infecting systems' boot sectors and spreading to any mounted floppy disks. After infection, it would lay dormant, infecting any inserted floppy disks but otherwise not taking any actions. The virus was set to \"detonate\" every year on March 6th, at which point it would corrupt any attached storage media. While the data on the drives technically wasn't wiped, their partition maps were corrupted, making file recovery impossible for average users. Much ado was made about this virus, particularly after January of 1992, when hardware and software vendors accidentally shipped infected products to consumers. As the virus made headlines, John McAfee (creator of McAfee Antivirus) and other tech \"experts\" stoked the flames, claiming that millions of computers could be infected with the virus\u2014despite known infections being limited to a few hundred systems. Users were advised not to use their computers on March 6th, or to fiddle with their computers' clocks on March 5th and 7th to avoid the date landing on the 6th. This advice was largely disregarded, and on March 6th, 1992, only ten to twenty thousand cases of data loss were reported. The last known Michaelangelo infection was in 1997. This was one of the earliest cases of \"branded\" malware getting mass-publicity and causing undue panic, despite having a relatively low impact. This tradition continues to this day, with new \"branded\" malware and vulnerabilities making headlines every year, followed by countless vendors using the subsequent panic to promote their \"cutting-edge\" security products. Macro Viruses In 1995, the same year that the greatest movie of all time was released to adoring theater audiences, the Concept virus became the first known example of a Macro Virus , abusing Microsoft Word's built-in macro-scripting language to infect documents and take unwanted actions on systems. In 1996, XML.Laroux was the first Microsoft Excel macrovirus. These viruses were the first viruses designed to infect documents, rather than executable files, and they were the first cross-platform viruses, capable of running on any system with Microsoft Office installed. Nobody is Safe 1996 also saw the release of the Staog virus, the first computer virus written for Linux. Fortunately, the vulnerabilities exploited by the virus were patched quickly, and the virus died off with little fanfare. In the years since, there have been numerous Linux malware discovered in the wild , yet Linux users continue to proudly boast: \"I don't need antivirus; I run Linux.\" (They're not alone; macOS users make the same boast.) Knock, Knock As if macro viruses and Linux viruses weren't enough, 1996 also brought NokNok 5.0 , the first (that I'm aware of) Remote-Access Trojan (RAT). Tools for remote desktop access have been around since the early '80s , with software like Carbon Copy and Timbuktu leading the pack. These tools were designed for legitimate use, and made no attempt to evade detection or deceive users. NokNok changed the game, providing remote control capabilities in a discreet package which could be installed without victims' knowledge. This was typically achieved via the Trojan Horse technique, wherein a malicious payload is attached to a legitimate, desirable application. This technique is a form of Social Engineering, much like its mythical namesake , and has seen widespread popularity among file-sharing and piracy communities, where users often seek free \"cracked\" copies or dodgy \"key generators\" (\"keygens\") for expensive legitimate software. CIH, the Space-Filler In 1998, the CIH virus infected sixty million computers worldwide, destroying data and, in many cases, erasing the system BIOS. The virus caused an estimated US$1 billion in damages, yet no charges were filed against its author, Chen Ing-hau, who claimed that he wrote the virus to challenge the AV industry's bold detection claims. He and a fellow student, Weng Shi-hao, co-authored an antivirus, enabling users to safely remove CIH from infected systems. At the time CIH was released, many viruses would prepend or append their viral code to the files they infected, resulting in changes to the size of the infected files. AV vendors caught on to this, and created detections for file-size alterations. To defeat this detection mechanism, the CIH authors developed a method to infect files without altering their size. When languages like C++ or Rust are compiled to binary, assemblers often include \"gaps\" of unused bytes in the executable file, padding sections to ensure proper byte alignment. The CIH virus would write its code into these gaps, thus infecting the file without altering its size. Plague of RATs Following NokNok, RATs became a hot commodity. In 1998, the Cult of the Dead Cow (cDc) released Back Orifice (BO), a tool they designed to demonstrate the insecurity of Windows systems. Despite claims that it was intended only for legitimate uses, the tool employed evasive tactics and could be installed without user interaction, making it perfect for use as a Trojan. In 1999, cDc released Back Orifice 2000 (BO2k), the successor to their previous year's release. BO2k added support for Windows NT, 2000 and XP, and employed a plugin architecture, enabling new functionality to be pushed to clients on-the-fly. As before, BO2k was touted as a legitimate tool. Here are a few of the plugins provided by the tool: Remote control of mouse and keyboard. Remote observation of the user's desktop and audio. Rootkit behavior, capable of hiding things from the system. Bypass firewalls via tunneling. Route through \"connection chains\" of multiple infected hosts. Live keylogging. Clientless Command-and-Control (C2) via IRC. With features like these, it's no surprise that BO2k was classified as malware in most AV engines. Following on BO2k's coattails, Sub7 was also released in 1999, and swiftly became one of the most popular RATs in the world. Much like BO2k, Sub7 was designed for trojanized installation, and provided a variety of similar features: Remote control and observation. Recovering cached passwords. ICQ account takeover. C2 via IRC. Keylogging. Port scanning and redirection. Sub7 also included some \"prank\" features, making it popular among skids : Open and close the CD tray. Swap mouse buttons. Use text-to-speech to make the computer speak. In the decades folowing the release of BO2k and Sub7, the popularity and proliferation of RATs has soared , and the focus has shifted from pranks to profits. Outlook, Look Out In 1999, a variety of malware was released which took advantage of Microsoft products, including Outlook, Outlook Express, and Office. The Happy99 worm wished users Happy New Year while infecting outbound emails. The Melissa worm was a macro virus which spread via Microsoft Office documents attached to infected emails. The documents appeared to contain login credentials for a number of pornographic websites, designed to entice users to open the file. The ExploreZip worm was discovered. It was designed to destroy Microsoft Office documents. The Kak worm , written in JavaScript, spread by exploiting a bug in Outlook Express. Shattering Windows In the years following the release of Windows 3.0, Microsoft became the global leader in the desktop OS market. Much to the chagrin of Mac and Linux users, Microsoft's products became the most wide-spread software in the world, despite being plagued by vulnerabilities and malware. To this day, the vast majority of malware targets Microsoft Office and Windows. These products continue to be the most common route for malware to infect systems and networks, whether via exploitation of 0-day vulnerabilities, or simply by abusing the built-in functionality of the software. In fact, one could argue that the single most effective way to prevent malware infections would be to eliminate all Microsoft products from your workplace. Still, Microsoft's global market dominance continues unabated. In fact, they now offer Microsoft Defender , a clever way to turn Microsoft's historically bug-ridden software into yet another revenue source. Defender protects Windows systems against malware which, historically, abuses Microsoft's own products to infect and spread. Microsoft creates and sells exploitable products, then creates and sells exploit protection. That's like if Kia sold cars that sometimes exploded, then sold a separate add-on package that prevented the explosions. Brilliant!","title":"Polymorphs, Macros and RATs! (Oh My!)"},{"location":"0x00%20History/03%20The%2090s/#viruses-evolved","text":"In 1990, Mark Washburn developed the first family of polymorphic viruses , known as Chameleon. These viruses could alter their machine-language code (and thus their digital \"fingerprint\") without altering the functionality of the virus. This effect was achieved by packing the viral core into a wrapper using randomized encryption algorithms and keys. Washburn designed the first of these viruses, 1260 (otherwise known as V2PX), after studying the Vienna Virus's disassembled source code, published by Ralf Burger (of Virdem fame). AntiVirus (AV) software was in its infancy at this time, and many early AV engines used hash-based detection. Polymorphism enabled malware to evade these hash-based engines, triggering a digital \"arms race.\" AV vendors scrambled to develop new detection methods, which drove malware authors to develop new evasion techniques, which drove new detection methods, and so on. This cycle continues to this day.","title":"Viruses, Evolved"},{"location":"0x00%20History/03%20The%2090s/#michaelangelo","text":"In 1991, Australian researchers discovered the Michaelangelo Virus , designed to infect DOS machines. The virus operated on the BIOS level, infecting systems' boot sectors and spreading to any mounted floppy disks. After infection, it would lay dormant, infecting any inserted floppy disks but otherwise not taking any actions. The virus was set to \"detonate\" every year on March 6th, at which point it would corrupt any attached storage media. While the data on the drives technically wasn't wiped, their partition maps were corrupted, making file recovery impossible for average users. Much ado was made about this virus, particularly after January of 1992, when hardware and software vendors accidentally shipped infected products to consumers. As the virus made headlines, John McAfee (creator of McAfee Antivirus) and other tech \"experts\" stoked the flames, claiming that millions of computers could be infected with the virus\u2014despite known infections being limited to a few hundred systems. Users were advised not to use their computers on March 6th, or to fiddle with their computers' clocks on March 5th and 7th to avoid the date landing on the 6th. This advice was largely disregarded, and on March 6th, 1992, only ten to twenty thousand cases of data loss were reported. The last known Michaelangelo infection was in 1997. This was one of the earliest cases of \"branded\" malware getting mass-publicity and causing undue panic, despite having a relatively low impact. This tradition continues to this day, with new \"branded\" malware and vulnerabilities making headlines every year, followed by countless vendors using the subsequent panic to promote their \"cutting-edge\" security products.","title":"Michaelangelo"},{"location":"0x00%20History/03%20The%2090s/#macro-viruses","text":"In 1995, the same year that the greatest movie of all time was released to adoring theater audiences, the Concept virus became the first known example of a Macro Virus , abusing Microsoft Word's built-in macro-scripting language to infect documents and take unwanted actions on systems. In 1996, XML.Laroux was the first Microsoft Excel macrovirus. These viruses were the first viruses designed to infect documents, rather than executable files, and they were the first cross-platform viruses, capable of running on any system with Microsoft Office installed.","title":"Macro Viruses"},{"location":"0x00%20History/03%20The%2090s/#nobody-is-safe","text":"1996 also saw the release of the Staog virus, the first computer virus written for Linux. Fortunately, the vulnerabilities exploited by the virus were patched quickly, and the virus died off with little fanfare. In the years since, there have been numerous Linux malware discovered in the wild , yet Linux users continue to proudly boast: \"I don't need antivirus; I run Linux.\" (They're not alone; macOS users make the same boast.)","title":"Nobody is Safe"},{"location":"0x00%20History/03%20The%2090s/#knock-knock","text":"As if macro viruses and Linux viruses weren't enough, 1996 also brought NokNok 5.0 , the first (that I'm aware of) Remote-Access Trojan (RAT). Tools for remote desktop access have been around since the early '80s , with software like Carbon Copy and Timbuktu leading the pack. These tools were designed for legitimate use, and made no attempt to evade detection or deceive users. NokNok changed the game, providing remote control capabilities in a discreet package which could be installed without victims' knowledge. This was typically achieved via the Trojan Horse technique, wherein a malicious payload is attached to a legitimate, desirable application. This technique is a form of Social Engineering, much like its mythical namesake , and has seen widespread popularity among file-sharing and piracy communities, where users often seek free \"cracked\" copies or dodgy \"key generators\" (\"keygens\") for expensive legitimate software.","title":"Knock, Knock"},{"location":"0x00%20History/03%20The%2090s/#cih-the-space-filler","text":"In 1998, the CIH virus infected sixty million computers worldwide, destroying data and, in many cases, erasing the system BIOS. The virus caused an estimated US$1 billion in damages, yet no charges were filed against its author, Chen Ing-hau, who claimed that he wrote the virus to challenge the AV industry's bold detection claims. He and a fellow student, Weng Shi-hao, co-authored an antivirus, enabling users to safely remove CIH from infected systems. At the time CIH was released, many viruses would prepend or append their viral code to the files they infected, resulting in changes to the size of the infected files. AV vendors caught on to this, and created detections for file-size alterations. To defeat this detection mechanism, the CIH authors developed a method to infect files without altering their size. When languages like C++ or Rust are compiled to binary, assemblers often include \"gaps\" of unused bytes in the executable file, padding sections to ensure proper byte alignment. The CIH virus would write its code into these gaps, thus infecting the file without altering its size.","title":"CIH, the Space-Filler"},{"location":"0x00%20History/03%20The%2090s/#plague-of-rats","text":"Following NokNok, RATs became a hot commodity. In 1998, the Cult of the Dead Cow (cDc) released Back Orifice (BO), a tool they designed to demonstrate the insecurity of Windows systems. Despite claims that it was intended only for legitimate uses, the tool employed evasive tactics and could be installed without user interaction, making it perfect for use as a Trojan. In 1999, cDc released Back Orifice 2000 (BO2k), the successor to their previous year's release. BO2k added support for Windows NT, 2000 and XP, and employed a plugin architecture, enabling new functionality to be pushed to clients on-the-fly. As before, BO2k was touted as a legitimate tool. Here are a few of the plugins provided by the tool: Remote control of mouse and keyboard. Remote observation of the user's desktop and audio. Rootkit behavior, capable of hiding things from the system. Bypass firewalls via tunneling. Route through \"connection chains\" of multiple infected hosts. Live keylogging. Clientless Command-and-Control (C2) via IRC. With features like these, it's no surprise that BO2k was classified as malware in most AV engines. Following on BO2k's coattails, Sub7 was also released in 1999, and swiftly became one of the most popular RATs in the world. Much like BO2k, Sub7 was designed for trojanized installation, and provided a variety of similar features: Remote control and observation. Recovering cached passwords. ICQ account takeover. C2 via IRC. Keylogging. Port scanning and redirection. Sub7 also included some \"prank\" features, making it popular among skids : Open and close the CD tray. Swap mouse buttons. Use text-to-speech to make the computer speak. In the decades folowing the release of BO2k and Sub7, the popularity and proliferation of RATs has soared , and the focus has shifted from pranks to profits.","title":"Plague of RATs"},{"location":"0x00%20History/03%20The%2090s/#outlook-look-out","text":"In 1999, a variety of malware was released which took advantage of Microsoft products, including Outlook, Outlook Express, and Office. The Happy99 worm wished users Happy New Year while infecting outbound emails. The Melissa worm was a macro virus which spread via Microsoft Office documents attached to infected emails. The documents appeared to contain login credentials for a number of pornographic websites, designed to entice users to open the file. The ExploreZip worm was discovered. It was designed to destroy Microsoft Office documents. The Kak worm , written in JavaScript, spread by exploiting a bug in Outlook Express.","title":"Outlook, Look Out"},{"location":"0x00%20History/03%20The%2090s/#shattering-windows","text":"In the years following the release of Windows 3.0, Microsoft became the global leader in the desktop OS market. Much to the chagrin of Mac and Linux users, Microsoft's products became the most wide-spread software in the world, despite being plagued by vulnerabilities and malware. To this day, the vast majority of malware targets Microsoft Office and Windows. These products continue to be the most common route for malware to infect systems and networks, whether via exploitation of 0-day vulnerabilities, or simply by abusing the built-in functionality of the software. In fact, one could argue that the single most effective way to prevent malware infections would be to eliminate all Microsoft products from your workplace. Still, Microsoft's global market dominance continues unabated. In fact, they now offer Microsoft Defender , a clever way to turn Microsoft's historically bug-ridden software into yet another revenue source. Defender protects Windows systems against malware which, historically, abuses Microsoft's own products to infect and spread. Microsoft creates and sells exploitable products, then creates and sells exploit protection. That's like if Kia sold cars that sometimes exploded, then sold a separate add-on package that prevented the explosions. Brilliant!","title":"Shattering Windows"},{"location":"0x00%20History/04%20Millenial%20Malware/","text":"\"I think everybody's got a malicious side.\" ~ Jonathan Rhys Meyers ILU <3 On May 5th, 2000, overflowing with love (but too late for Valentine's Day), 24-year-old Onel de Guzman shared his \"Love Letter\" worm ( ILOVEYOU ) with the world, infecting over 10 million systems. The worm spread by email, containing a malicious .vbs attachment which trashes the user's drives before forwarding itself to all the people in their address book. Considering data loss and the cost of remediation, the worm caused an estimated US$15-24 billion in damages. For some reason, the world wasn't thrilled with Onel's exhuberant expression of adoration. Still, he never served time; the Philippines had no laws against writing malware at the time, so all charges were dropped. (They passed laws after-the-fact, but couldn't charge him for crimes committed prior.) Onel set the bar high, but malware authors love a challenge. Tennis Star Goes Viral At the peak of her sports career, tennis star Anna Kournikova achieved super-stardom. Mixed drinks and poker hands were named after her. She had a licensed PlayStation game, released in Japan and Europe. She was so famous that between 2001 and 2003, her name was among the top most-searched terms on Google. Looking to cash in on that fame, 20-year-old Jan de Wit released the Vbs.OnTheFly worm\u2014known more widely as the \"Anna Kournikova virus\"\u2014in February of 2001. Like the ILOVEYOU worm, the virus used a .vbs email attachment\u2014masquerading as a risque photo of the namesake tennis star\u2014to infect the system. Like its predecessor, the worm would send itself to everyone in the user's Outlook address book. Unlike its predecessor, the worm did not cause any damage to systems it infected. The worm infected millions of systems and caused problems in email servers worldwide. But here's the kicker... de Wit didn't hand-craft OnTheFly. He used a simple online VBS Worm Generator tool, originally created by an Argentinian hacker called [K]Alamar. He created the worm to see whether security had improved in the year following the ILOVEYOU worm. (Clearly it hadn't.) He attributed the worm's success to the world's unhealthy obsession with Kournikova. Jan served 150 hours of community service. Worms of Mass Destruction 2001 saw a flood of additional worms: Magistr, a sophisticated email worm targeting people in the legal profession. Sadmind , which spread by exploiting Sun Solaris and Microsoft IIS. Sircam , which spread through Microsoft systems via email and unprotected network shares. Code Red , which spread via Microsoft IIS exploits. Code Red II , because everybody loves a good sequel. Nimda , which spread not only via Windows exploits, but via existing Code Red II and Sadmind infections. Klez , which exploited Microsoft Internet Explorer, Outlook, and Outlook Express. 2002 had a nice change of pace, starting with the Simile virus , written in Assembly by \"Mental Driller.\" The virus would lay dormant, activate on a semi-random date, show a \"Free Palestine\" message, then completely rebuild itself , shuffling around its code prior to infecting random files on the system. This resulted in a constantly-changing viral fingerprint, which made the malware remarkably resilient and difficult to detect. Following Simile, 2002 brought Beast (yet another RAT), then skipped right back to worms with Mylife , which spread via... can you guess? That's right! A .vbs email attachment that forwards itself to everyone in the user's Outlook address book. Nobody said malware authors had to be original. Worms Without Borders In 2003, aside from a couple RATs, it was worms all the way down: SQL Slammer , spreading via Microsoft SQL Server. Blaster , exploiting Windows system services. Welchia , which attempts to remove Blaster and patch Windows. ( Sounds familiar... ) Sobig , which spread across Windows systems via email and network shares. Swen , daring to think different. (This one is written in C++!) Sober , yet another .vbs worm. Agobot , which exploited Windows vulnerabilities. Bolgimo , which exploited Windows vulnerabilities. 2004 continued the trend: Bagle , MyDoom , Netsky , and Witty all followed closely in their predecessors' footsteps. Sasser exploited Windows LSASS (but removed MyDoom and Bagle). Caribe broke from the pack, becoming the first worm to infect mobile phones, spreading via Bluetooth. Santy became the first-known \"webworm,\" exploiting online forums running phpBB . It used Google to find new targets, and infected around 40,000 sites before Google filtered the malicious search query. The worms did not stop. Legends say they're still spreading to this very day... (Like RATs, I'll only cover notable worms from here on.) Corporate Rootkits? In My Home PC? It's more likely than you'd think! While the swarm of worms continued in 2005, Sony BMG (a now-defunct music-and-entertainment venture) stole the headlines when researchers discovered two subversive rootkits designed to impede digital piracy . The rootkits hid from the system, preventing users from copying CDs, and \"phoning home\" to report on users' activity. They violated copyrights, installed without user consent, and created vulnerabilities which were exploited by unrelated malware. To quell the public outrage, Sony BMG released an uninstaller for one of the rootkits\u2014though the uninstaller failed to uninstall the rootkit, and actually introduced more malware and vulnerabilities onto affected systems. Hoping to smooth things over, Sony BMG paid out a few settlements, recalled 10% of the infected CDs, and pinky-promised they'd never do it again. How the Mighty Have Fallen In February of 2006, Mac OS X fans\u2014who, like their Linux counterparts, had long boasted immunity to malware\u2014were dismayed by the news of a trojan (known as OSX/Leap-A or OSX/Oompa-A ) designed to infect Mac systems. Fortunately, the trojan didn't pose much threat, so they\u2014like their Linux counterparts\u2014continued to boast immunity, despite evidence to the contrary. Following on its heels, the Stardust Macro Virus (a.k.a. \"Starbucks\") was the first macro virus for StarOffice and OpenOffice. Proponents of these office suites oft claimed that they were more secure than Microsoft Office, as they didn't employ Microsoft's VBS macro language. The Stardust virus shattered their dreams, proving that nothing is sacred, and no one is safe. ( OpenOffice and LibreOffice are still excellent alternatives for those looking to kick their Microsoft habit.) From Olympus With Love In 2007, the Zeus banking trojan was unleashed on Windows systems. The malware stole banking information via keystroke logging, and spread to about 3.6 million systems in the U.S. alone. When the malware ring was busted, over 100 people were charged with conspiracy to commit bank fraud and launder money, having stolen approximately US$70 million. The original author was never caught, and is believed to have retired in 2010. Infect Your Treasured Memories Today In 2008, the Mocmex trojan spread via digital photo frames, infecting computers to which the frames were attached. The malware employed complex anti-detection mechanisms and disabled system protections, all so it could steal passwords for online game accounts. Industry experts called it the \"nuclear bomb of malware,\" proving once again that industry experts have a flair for the dramatic. Malware for Everyone! 2008 also saw the Bohmini.A RAT , which exploited Adobe Flash\u2014a notoriously-insecure software that just refused to die until Adobe finally killed it in 2021 . In July, the Koobface worm spread across users of Facebook and Myspace, as well as other social networks, infecting Windows, Mac OS X and Linux indiscriminately. Much to the chagrin of its designers, Koobface's notoriety was soon overshadowed by that of Conficker , a worm that infected up to 15 million systems, including numerous government, military, police and hospital networks. Four of Conficker's creators were arrested, but only one served time, spending four years in prison. Tracking Trends Malware, as with everything, is subject to trends. For each new strain that breaks the mold, a dozen copy-cats will spring up in its wake. Malware authors are pragmatic. \"If it ain't broke, don't fix it.\" An entire decade of email worms propagated via .vbs email attachments, preying on gullible users. Microsoft failed to prevent these attacks, so they just kept coming. There may have been a few creative malware authors out there, but the vast majority just copied each other's work, making only minor tweaks to existing code. The same is true today. The \"malware du jour\" may have shifted from RATs to worms to ransomware, but everyone's still playing \"follow the leader,\" parroting popular paradigms in malware design. Every time a new 0-day drops, malware authors race to exploit it for as long as possible, while software developers struggle to patch their software. Once the bug is patched, malware authors bide their time awaiting the next big 0-day, when they can do it all again. In fact, so many attackers employ similar tactics that in 2013, MITRE created the ATT&CK framework to document them all. Naturally, the ATT&CK framework is an excellent resource for aspiring pentesters and malware authors/analysts, providing excellent documentation of common Tactics, Techniques and Procedures (TTPs). If you haven't yet, you should check it out. It's not as deep a rabbit-hole as TVTropes , the \"all-devouring pop-culture wiki,\" but you could still get lost for hours, exploring all the data on MITRE's site. (No, I'm not sponsored by MITRE. Though I wouldn't turn down their money... \ud83d\udc40)","title":"Millenial Malware"},{"location":"0x00%20History/04%20Millenial%20Malware/#ilu-3","text":"On May 5th, 2000, overflowing with love (but too late for Valentine's Day), 24-year-old Onel de Guzman shared his \"Love Letter\" worm ( ILOVEYOU ) with the world, infecting over 10 million systems. The worm spread by email, containing a malicious .vbs attachment which trashes the user's drives before forwarding itself to all the people in their address book. Considering data loss and the cost of remediation, the worm caused an estimated US$15-24 billion in damages. For some reason, the world wasn't thrilled with Onel's exhuberant expression of adoration. Still, he never served time; the Philippines had no laws against writing malware at the time, so all charges were dropped. (They passed laws after-the-fact, but couldn't charge him for crimes committed prior.) Onel set the bar high, but malware authors love a challenge.","title":"ILU &lt;3"},{"location":"0x00%20History/04%20Millenial%20Malware/#tennis-star-goes-viral","text":"At the peak of her sports career, tennis star Anna Kournikova achieved super-stardom. Mixed drinks and poker hands were named after her. She had a licensed PlayStation game, released in Japan and Europe. She was so famous that between 2001 and 2003, her name was among the top most-searched terms on Google. Looking to cash in on that fame, 20-year-old Jan de Wit released the Vbs.OnTheFly worm\u2014known more widely as the \"Anna Kournikova virus\"\u2014in February of 2001. Like the ILOVEYOU worm, the virus used a .vbs email attachment\u2014masquerading as a risque photo of the namesake tennis star\u2014to infect the system. Like its predecessor, the worm would send itself to everyone in the user's Outlook address book. Unlike its predecessor, the worm did not cause any damage to systems it infected. The worm infected millions of systems and caused problems in email servers worldwide. But here's the kicker... de Wit didn't hand-craft OnTheFly. He used a simple online VBS Worm Generator tool, originally created by an Argentinian hacker called [K]Alamar. He created the worm to see whether security had improved in the year following the ILOVEYOU worm. (Clearly it hadn't.) He attributed the worm's success to the world's unhealthy obsession with Kournikova. Jan served 150 hours of community service.","title":"Tennis Star Goes Viral"},{"location":"0x00%20History/04%20Millenial%20Malware/#worms-of-mass-destruction","text":"2001 saw a flood of additional worms: Magistr, a sophisticated email worm targeting people in the legal profession. Sadmind , which spread by exploiting Sun Solaris and Microsoft IIS. Sircam , which spread through Microsoft systems via email and unprotected network shares. Code Red , which spread via Microsoft IIS exploits. Code Red II , because everybody loves a good sequel. Nimda , which spread not only via Windows exploits, but via existing Code Red II and Sadmind infections. Klez , which exploited Microsoft Internet Explorer, Outlook, and Outlook Express. 2002 had a nice change of pace, starting with the Simile virus , written in Assembly by \"Mental Driller.\" The virus would lay dormant, activate on a semi-random date, show a \"Free Palestine\" message, then completely rebuild itself , shuffling around its code prior to infecting random files on the system. This resulted in a constantly-changing viral fingerprint, which made the malware remarkably resilient and difficult to detect. Following Simile, 2002 brought Beast (yet another RAT), then skipped right back to worms with Mylife , which spread via... can you guess? That's right! A .vbs email attachment that forwards itself to everyone in the user's Outlook address book. Nobody said malware authors had to be original.","title":"Worms of Mass Destruction"},{"location":"0x00%20History/04%20Millenial%20Malware/#worms-without-borders","text":"In 2003, aside from a couple RATs, it was worms all the way down: SQL Slammer , spreading via Microsoft SQL Server. Blaster , exploiting Windows system services. Welchia , which attempts to remove Blaster and patch Windows. ( Sounds familiar... ) Sobig , which spread across Windows systems via email and network shares. Swen , daring to think different. (This one is written in C++!) Sober , yet another .vbs worm. Agobot , which exploited Windows vulnerabilities. Bolgimo , which exploited Windows vulnerabilities. 2004 continued the trend: Bagle , MyDoom , Netsky , and Witty all followed closely in their predecessors' footsteps. Sasser exploited Windows LSASS (but removed MyDoom and Bagle). Caribe broke from the pack, becoming the first worm to infect mobile phones, spreading via Bluetooth. Santy became the first-known \"webworm,\" exploiting online forums running phpBB . It used Google to find new targets, and infected around 40,000 sites before Google filtered the malicious search query. The worms did not stop. Legends say they're still spreading to this very day... (Like RATs, I'll only cover notable worms from here on.)","title":"Worms Without Borders"},{"location":"0x00%20History/04%20Millenial%20Malware/#corporate-rootkits-in-my-home-pc","text":"It's more likely than you'd think! While the swarm of worms continued in 2005, Sony BMG (a now-defunct music-and-entertainment venture) stole the headlines when researchers discovered two subversive rootkits designed to impede digital piracy . The rootkits hid from the system, preventing users from copying CDs, and \"phoning home\" to report on users' activity. They violated copyrights, installed without user consent, and created vulnerabilities which were exploited by unrelated malware. To quell the public outrage, Sony BMG released an uninstaller for one of the rootkits\u2014though the uninstaller failed to uninstall the rootkit, and actually introduced more malware and vulnerabilities onto affected systems. Hoping to smooth things over, Sony BMG paid out a few settlements, recalled 10% of the infected CDs, and pinky-promised they'd never do it again.","title":"Corporate Rootkits? In My Home PC?"},{"location":"0x00%20History/04%20Millenial%20Malware/#how-the-mighty-have-fallen","text":"In February of 2006, Mac OS X fans\u2014who, like their Linux counterparts, had long boasted immunity to malware\u2014were dismayed by the news of a trojan (known as OSX/Leap-A or OSX/Oompa-A ) designed to infect Mac systems. Fortunately, the trojan didn't pose much threat, so they\u2014like their Linux counterparts\u2014continued to boast immunity, despite evidence to the contrary. Following on its heels, the Stardust Macro Virus (a.k.a. \"Starbucks\") was the first macro virus for StarOffice and OpenOffice. Proponents of these office suites oft claimed that they were more secure than Microsoft Office, as they didn't employ Microsoft's VBS macro language. The Stardust virus shattered their dreams, proving that nothing is sacred, and no one is safe. ( OpenOffice and LibreOffice are still excellent alternatives for those looking to kick their Microsoft habit.)","title":"How the Mighty Have Fallen"},{"location":"0x00%20History/04%20Millenial%20Malware/#from-olympus-with-love","text":"In 2007, the Zeus banking trojan was unleashed on Windows systems. The malware stole banking information via keystroke logging, and spread to about 3.6 million systems in the U.S. alone. When the malware ring was busted, over 100 people were charged with conspiracy to commit bank fraud and launder money, having stolen approximately US$70 million. The original author was never caught, and is believed to have retired in 2010.","title":"From Olympus With Love"},{"location":"0x00%20History/04%20Millenial%20Malware/#infect-your-treasured-memories-today","text":"In 2008, the Mocmex trojan spread via digital photo frames, infecting computers to which the frames were attached. The malware employed complex anti-detection mechanisms and disabled system protections, all so it could steal passwords for online game accounts. Industry experts called it the \"nuclear bomb of malware,\" proving once again that industry experts have a flair for the dramatic.","title":"Infect Your Treasured Memories Today"},{"location":"0x00%20History/04%20Millenial%20Malware/#malware-for-everyone","text":"2008 also saw the Bohmini.A RAT , which exploited Adobe Flash\u2014a notoriously-insecure software that just refused to die until Adobe finally killed it in 2021 . In July, the Koobface worm spread across users of Facebook and Myspace, as well as other social networks, infecting Windows, Mac OS X and Linux indiscriminately. Much to the chagrin of its designers, Koobface's notoriety was soon overshadowed by that of Conficker , a worm that infected up to 15 million systems, including numerous government, military, police and hospital networks. Four of Conficker's creators were arrested, but only one served time, spending four years in prison.","title":"Malware for Everyone!"},{"location":"0x00%20History/04%20Millenial%20Malware/#tracking-trends","text":"Malware, as with everything, is subject to trends. For each new strain that breaks the mold, a dozen copy-cats will spring up in its wake. Malware authors are pragmatic. \"If it ain't broke, don't fix it.\" An entire decade of email worms propagated via .vbs email attachments, preying on gullible users. Microsoft failed to prevent these attacks, so they just kept coming. There may have been a few creative malware authors out there, but the vast majority just copied each other's work, making only minor tweaks to existing code. The same is true today. The \"malware du jour\" may have shifted from RATs to worms to ransomware, but everyone's still playing \"follow the leader,\" parroting popular paradigms in malware design. Every time a new 0-day drops, malware authors race to exploit it for as long as possible, while software developers struggle to patch their software. Once the bug is patched, malware authors bide their time awaiting the next big 0-day, when they can do it all again. In fact, so many attackers employ similar tactics that in 2013, MITRE created the ATT&CK framework to document them all. Naturally, the ATT&CK framework is an excellent resource for aspiring pentesters and malware authors/analysts, providing excellent documentation of common Tactics, Techniques and Procedures (TTPs). If you haven't yet, you should check it out. It's not as deep a rabbit-hole as TVTropes , the \"all-devouring pop-culture wiki,\" but you could still get lost for hours, exploring all the data on MITRE's site. (No, I'm not sponsored by MITRE. Though I wouldn't turn down their money... \ud83d\udc40)","title":"Tracking Trends"},{"location":"0xFF%20About/FD%20Origins/","text":"ScriptSharks Origins Disclaimer: This story is told from memory. I expect there will be inaccuracies. Where appropriate, I've invented code or console transcripts that attempt to represent data lost to time. I've recreated them as accurately as I can. I aim to tell the truth of my experience, though I cannot guarantee the veracity of every detail. Grab a drink, pull up a seat, and I'll tell you the story behind ScriptSharks.com . I never knew the domain's original owner personally, but he (and his website) changed my life... Though, not in the way one might expect. Read on, and you'll understand. Prologue Back in 2001, I was a punk-ass wannabe hacker in high school. I'd been writing software for about six years, and after watching a PBS Frontline Documentary on hackers , I became obsessed with the subject. I collected every scrap of data I could find, from low-bar \"script kiddie\" hack-tools to sophisticated exploitation whitepapers. I read books and 'zines (like 2600 and PHRACK ), watched videos, and infected my parents' PC with more malware than I care to admit. I learned about hacker history back to the '60s, about their culture and communities, and about famous groups like the Masters of Deception and the Legion of Doom (of the alleged \" Great Hacker War \"). I was insatiable. Attack Preparation (MITRE: T1593.002 ) In 2003, after learning about SQL Injection (SQLi), I was eager to practice what I'd learned. Back then, we didn't have sites like HackTheBox providing practice labs. Even HackThisSite was new, and was not well-known. Hackers had two choices: either get legal access to test hardware, or practice your skills \"in the wild.\" I was too broke to afford my own computer, let alone to buy a spare PC for \"target practice,\" and I didn't know any other hackers IRL. I decided to take the risk and practice on live targets. (As a kid, rational thinking and sound judgment were not my strong suits.) I used my Google-fu to search for vulnerable websites. I did a basic inurl:login.php search, and among the results, I found a link to scriptsharks.com . On visiting the site, I was excited to see that it was a site for programmers, including guides for PHP (which I was learning at the time). I decided to learn more about the site and its owner. Reconnaissance (MITRE: T1589 , T1592.002 , T1594 , T1595 ) In 2000, Stephen \"Gabriel\" Lane (a.k.a. \"Calico Jack\")\u2014a motorcycle enthusiast and Senior Software Engineer for the New Orleans Saints \u2014created ScriptSharks.com as a place \" designed by a programmer for programmers ,\" where he could share tutorials, manage code projects, and provide other resources for programmers. He was fluent in numerous programming languages, and provided the full source code for dozens of programs he'd written, all for free. When I first started programming, back in 1995, I didn't have the Internet, and it was hard to find resources from which to learn. So I appreciated when successful people like Stephen shared their code and experience with the community. It seemed like he was living my dream, and he wasn't much older than me. From his website, I knew that Stephen used the Linux operating system, and designed websites using PHP, hosted with Apache and MySQL. (A typical LAMP stack .) I scanned the server's ports; 22 and 80 were open, but not much else. These ports were provided by OpenSSH and Apache , each fully up-to-date and patched. Initial Access Curiosity killed the cat. I'm glad I'm not a cat. Vuln Discovery (MITRE: T1588.006 ) After learning about Stephen and his technical knowledge, I was excited to explore the guides and source code provided on his site. My first stop was his guide to designing Sessions and Authentication Systems in PHP. My original goal was to practice SQLi attacks; it seemed likely that his site's auth code would be similar to that in his guide, which included SQL table layouts and code samples. If there was a vulnerability to be found, this was a good place to start hunting. Here's the session-checking code from Stephen's guide: function is_logged_in() { global $session_id; $select = \"SELECT Logged_In FROM Sessions WHERE Session_ID = '$session_id'\"; $result = mysql_db_query(\"Your DB\", $select) or die (mysql_error() . \"<HR>\\n$select\"); $db = mysql_fetch_array($result); return $db[Logged_In]; } And here's the logout code: session_start(); $session_id = session_id(); $insert = \"UPDATE Sessions SET Logged_In = '0' WHERE Session_ID = '$session_id'\"; $result = mysql_db_query(\"Your DB\", $insert) or die(mysql_error() . \"<hr />\\n\" . $insert); On reading the code, I realized the SELECT query was not being sanitized in the is_logged_in function, nor was the UPDATE query in the logout code. Theoretically, someone could de-authenticate any user they wished, or authenticate as any user, as long as they had some way to control the contents of the $session_id variable. Stephen had failed to sanitize database inputs in his guide; perhaps the same would be true of his login page? Vuln Confirmation (MITRE: T1190 ) I decided to test the login for SQLi vulnerabilities. If the login.php script were written similar to the code from his tutorial, the code would likely include a SQL query something like this: $select = \"SELECT * FROM Users WHERE Username = '$username' AND Password = '$password' LIMIT 1\"; When called on the database, the $username and $password variables would be substituted for user-provided values. If I entered ' OR '1'='1 as both the username and password, the query would return the first user in the database. In most cases, the first user in the database is an admin. I did not actually expect my attack to work. Stephen's tutorial was intended to be basic, for the sake of learning. Considering the experience listed on his resum\u00e9, I expected the $username and $password variables to be sanitized before being passed to the database. So I was legitimately surprised when, upon executing my SQLi attack, I was successfully authenticated as the admin user, sglane . \"Holy crap,\" I thought. \"I got in!\" It was an incredible rush. I was simultaneously thrilled that my attack had worked, and terrified that I was going to get caught and arrested under the CFAA over a silly SQLi attack. (Funny how consequences only came to mind after I'd done the attack.) I hadn't caused any harm, though; and besides, this was Stephen's personal page, not attached to some hyper-litigious corporation. No harm, no foul, right? My excitement outweighed my fear. I decided to press further. By altering my query, I could skip the sglane user and authenticate as the second user in the database: Username: ' OR '1'='1 Password: ' OR '1'='1' AND Username != 'sglane Executing the attack, I was successfully authenticated as the second user in the database. From there it was a simple matter to enumerate all the users, one by one, simply adding a new Username != 'blah' clause to the query for each discovered user. Not bad for my first real-world attempt at SQLi! Account Compromise (MITRE: T1212 , T1552 , T1586 ) I was quite pleased with my accomplishment, but I was not done yet. What good are usernames without passwords? I searched around, unable to find an obvious way to retrieve the password from the database. I decided to try \"blind\" injection, enumerating the password character-by-character: Username: sglane Password: ' OR Password LIKE 'a% If the password started with a , I'd be authenticated. Otherwise, I'd be returned to the login screen, where I'd check every subsequent character until I found a match. Then I could start on the 2nd character, and so on. Once I'd uncovered the first password, I could move on to the second username, and repeat the process. Without automation, this process could take ages, but I was young and optimistic, and people didn't often use random 20-character passwords back then. Imagine my surprise when I found the complete password on the first attempt. After sending my injected credentials, the site rejected my attempt and returned me to the login page. However, I noticed that the login form had been re-populated upon my return, rather than preseting me with empty fields. \"Curious,\" I thought. \"What values are in the form fields?\" Viewing the page source code, I was appalled to discover that the login script, while refusing my attempt, had actually filled in the correct password for the specified user , taken straight out of the database. The password was right there, in clear-text, in the HTML of the page. It appeared that Stephen had intended the script to re-populate the form fields with the user's original input upon returning to the login page, like so: <?php $username = $_POST['username']; $password = $_POST['password']; $query = \"SELECT Username, Password FROM Users WHERE Username = '$username' AND Password = '$password' LIMIT 1\"; $result = mysql_db_query(\"Your DB\", $query) or die(mysql_error() . \"<hr />\\n\" . $query); $values = mysql_fetch_array($result); if($values['Username'] == $username && $values['Password'] == $password) { /* Redirect the user to the projects page. */ header(\"Location: projects.php\"); exit; } else { /* Show login fields again. */ ?> <form> <input type=\"text\" name=\"username\" value=\"<?php echo $username; ?>\" /> <input type=\"password\" name=\"password\" value=\"<?php echo $password; ?>\" /> <input type=\"submit\" value=\"Login\" /> </form> <?php exit; } ?> However, there was a bug in Stephen's code: rather than using the values pulled from $_POST , he used the values returned by the database: [...] $values = mysql_fetch_array($result); [...] <form> <input type=\"text\" name=\"username\" value=\"<?php echo $values['Username']; ?>\" /> <input type=\"password\" name=\"password\" value=\"<?php echo $values['Password']; ?>\" /> <input type=\"submit\" value=\"Login\" /> </form> [...] This is an easy mistake to make, and a difficult one to notice when troubleshooting. If my suspicion was correct, all I had to do was enter the correct username, along with an incorrect password, click \"Login,\" then (after the login was rejected) click \"Login\" again, and I'd be authenticated as whichever user I wished. I tried. It worked. 10 minutes later I had the passwords for every single user of ScriptSharks.com . I could log in as anyone, and see all the projects they had created on the site. But that wasn't enough. I was feeling euphoric, my confidence boosted by my success. \"How far can I go?\" I thought. \"Can I get root?\" Password Reuse (MITRE: T1021.004 , T1078.003 ) With a list of valid account credentials, I turned my attention to the SSH server running on port 22 . These days we consider it bad practice to re-use passwords for multiple accounts. However, back in 2002, password reuse was still quite common, and sglane was no exception. I downloaded PuTTY , an SSH client for Windows, and connected to ScriptSharks.com's SSH server, using the credentials I had recovered for sglane . The credentials worked, and I was presented with a command prompt. Privilege Escalation (MITRE: T1548.003 ) Having gained access to the system as sglane , I wanted to elevate my privileges to root . Since sglane was an admin, I could simply use sudo to obtain root access, providing credentials when prompted: sglane@webserver:~$ sudo su [sudo] password for sglane: root@webserver:/home/sglane# This worked; I was logged in as root . Discovery (MITRE: T1003.008 , T1518 , T1083 , T1087.001 , T1552.001 ) After obtaining root access, I explored the system further. Reading the /etc/passwd file revealed the www-data account, which is the default account used by the Apache web server. (I could have also dumped the contents of /etc/shadow to see the password hashes for other accounts, but I did not have access to a password-cracking utility like John the Ripper at the time, so I left the hashes alone.) Looking in the /var/www directory (the default Apache webroot at the time), I discovered that scriptsharks.com had its own subdirectory, along with three others*: root@webserver:/home/sglane# ls -lh /var/www total 16K drwxr-xr-x 2 root root 4.0K Aug 9 18:15 onlineshop.com drwxr-xr-x 2 root root 4.0K Dec 30 2001 phpmyadmin drwxr-xr-x 2 root root 4.0K May 12 11:05 retailstore.com drwxr-xr-x 2 root root 4.0K Apr 19 05:02 scriptsharks.com * Note: I have long forgotten the domains for the two online shops Stephen managed, so I've used onlineshop.com and retailstore.com as generic substitutions. Stephen was using one server to host ScriptSharks and two online retail stores, as well as the phpMyAdmin web-based MySQL administration tool. Browsing to the scriptsharks.com directory, I found the site's PHP source code, which included database connection credentials. The credentials appeared to be site-specific, with ScriptSharks and the online stores each using a separate account. However, upon visiting the phpMyAdmin service hosted on the website, I was able to authenticate as sglane using the password I'd recovered previously, and was able to access the databases for all three sites. Collection (MITRE: T1005 , T1560.001 ) These databases included tables for user accounts, product information, customer orders, and more. They included cleartext usernames, emails and passwords for all accounts on all three sites, as well as details for every order placed on the two retail sites, including the customer's name, shipping address, and credit card information. If a malicious hacker got access to these records, it could cause serious trouble for Stephen and his online businesses. Fortunately, my motivations were intellectual, not material; I had no interest in abusing the data. Quite the opposite! Following the discovery, I knew I had to talk to Stephen about securing his websites. My predicament was this: How do I reveal the vulnerabilities in Stephen's websites so he'll take me seriously, without compromising system security, and without getting arrested for computer crimes? At the time, the concept of Coordinated Vulnerability Disclosure was not yet widely known, despite the fact that vulnerability disclosure had been a subject of heated debate since the 1800s . I weighed my options: If I claimed I had hacked his site without providing proof, he would dismiss my claims. What proof would suffice? A dump of the database would be sufficient; it would demonstrate that sensitive data was accessed, giving credibility to my claims. So I used mysqldump to export all databases to a single file: root@webserver:/home/sglane# mysqldump --all-databases -u sglane -p secretpassword > /home/sglane/databases.sql The resulting file was quite large, so I compressed it with zip , encrypting the contents with a password\u2014the same password used to authenticate with the sglane account: root@webserver:/home/sglane# zip -p secretpassword databases.zip databases.sql I had my proof; now I needed to consider how to provide it. Malicious attackers would simply exfiltrate the file, eager to sell the data to credit fraudsters or cash-in themselves. However, I did not want the data to leave the system; not only would this look bad for me\u2014committing actual data theft would undermine any ethical defense I could build\u2014but it would also be a security risk for Stephen and his business. As it stood, the only way to steal the data would be to attack Stephen's systems. But if the same data were also on my own system or stored on the 'net somewhere, then the data would be at even greater risk of compromise simply by existing in multiple places. Rather than exfiltrate the data prior to disclosure, I simply left the encrypted databases.zip file in Stephen's home directory, and deleted the original databases.sql dump file. Then I began drafting an email, letting Stephen know I had discovered vulnerabilities on his server, and had left the databases.zip file in his home directory as proof\u2014encrypted with his own secret password. This way, I didn't have to transmit the password via email; I could simply say \"use the same password you use everywhere else.\" Using his own password to encrypt the dump file provided additional proof of compromise. Impact (MITRE: T1485 , T1489 , T1491 , T1499 , T1529 , T1531 , T1561 , T1565.001 ) While my intentions were never malicious, I was sure to outline some of the risks inherent in the vulnerabilities I'd discovered. For example, there was the obvious risk of credit card fraud and identity theft from the customer data, but that was just the tip of the iceberg. With access to the database, attackers could modify data. They could delete legitimate orders, or lock people out of their accounts. They could alter orders, rerouting legitimate purchases to the attackers' address. They could change prices, alter inventory levels, or double-charge customers. They could create new orders, mark them as paid but not shipped, and obtain free products from Stephen's stores. Or they could mark products as returned, but not yet refunded, and steal money. Looking beyond the database, it would also be possible for attackers to deface Stephen's websites, alter their source code, host and transmit malicious code or other illicit data, use the site to conduct a phishing attack, and even use the site as a C2 server for a malware botnet. If they're feeling destructive, attackers could use sudo rm -rf / command to wipe the server's filesystem. Or a fork-bomb could cause the system to become non-responsive. Or, if they're feeling lazy, they could simply sudo shutdown -h now to take the server offline. But the impact wasn't limited to Stephen's systems. Stephen liked to re-use the same password across multiple accounts, and he wasn't alone. Doubtless many of his websites' users did the same. With access to the database of usernames and their associated email addresses and passwords, attackers could abuse this habit to gain unauthorized access to the external email accounts of Stephen's users. With this access, users could potentially defraud those users further, stealing sensitive data, gaining access to other accounts and services (such as online banking), and even using their legitimate email accounts for phishing attacks. The possibilities were endless! And I made sure Stephen knew about them. Aftermath After composing my email to Stephen, the adrenaline from my exploits had faded, and the reality of the situation began to set in. In my excitement and curiosity, I hadn't given much thought to the consequences of my actions. After writing about all the ways people might exploit Stephen's websites, I realized the risk I was taking, and considered whether to send the email or just wipe my tracks, deleting all evidence of my intrusion and pretending I'd never found the site. While the \"wipe my tracks\" option looked appealing, my decision was influenced by two core assumptions: Everyone is smarter than me. Second, I assume I'm never the first to discover anything. If I tried to cover my tracks, Stephen would find some logfile or other overlooked evidence of my intrusion. Even the act of covering one's tracks creates more tracks. Assuming that Stephen was smarter than me, I could not hope to hide my intrusion. I would be caught, one way or another. But what if I knew I wouldn't get caught? I could still walk away as if I had never found the site, right? This is where the 2nd assumption comes in. Having discovered these vulnerabilities in Stephen's websites, I had to assume that someone else had discovered them first. This presented an ethical dilemma: Could I ignore the vulnerabilities, knowing that someone else could already be abusing them? Consider the following (hypothetical) scenario: Say you're a tourist visiting the Eiffel Tower, and while leaning against the rail to snap a photo, you accidentally dislodge the railing. Looking at the damage, you realize that the rail could easily fall off, and if someone were to lean on it, they could potentially fall to their death. If you report the broken railing, you might be accused of causing the damage. But if you don't report the damage, someone could get hurt or die. Therefore, despite the personal risk, the only ethical option would be to report the faulty railing, so that it could be repaired, and nobody would get hurt. Likewise, despite the personal risk inherent in disclosure, I felt I could not ethically ignore the vulnerabilities in Stephen's websites, knowing that they could lead to great harm to Stephen and his users. Disclosure My heart raced as I clicked \"send\" on the email. Shortly after, the bell rang for lunch. As I ate, I considered the very real possibility that I could be arrested for computer crimes. Despite my intentions, and my efforts to alert Stephen to the vulnerabilities in his systems, I could still go to jail. I had heard of minors being arrested and tried as adults. How would I survive incarceration? How would I explain this to my parents? My actions were indelible. The ball was in Stephen's court. All I could do was wait. Suffice to say, it was a very anxious lunch. Upon my return, I checked my inbox, and found an email from Stephen. He was, understandably, irate. He'd been having a pretty good day until I came along. Now he had a security incident on his hands, which could impact his reputation and his career. He felt endangered, and reacted defensively, threatening litigation against me. Remediation It appeared my worst fears were coming true. Still, I felt disclosure was the right course of action. I explained as much in my response, and offered my advice on how to fix the vulnerabilities and improve his code security. I also encouraged him to implement better password hygeine, both in his databases and with his personal accounts. Finally, I reminded him of a few important details which, I hoped, would dissuade legal recourse: I had taken no harmful actions on his system, and had not only disclosed the vulnerabilities, but provided solutions. As a minor, I would likely receive a lighter sentence than an adult in my position. At least one of the web-shops Stephen operated was for a business based in California. California law requires businesses to notify users whose unencrypted personal information may have been acquired by an unauthorized person. If Stephen took me to court for unauthorized access, he'd force the businesses whose websites he hosted to disclose the breach to their customers. This would cause a pile of problems for Stephen and his business clients. The businesses would suffer financial losses, and Stephen would incur damage to his reputation and career. It seemed like a lot of unnecessary hassle, from my perspective, when instead Stephen could simply fix the bugs, change his passwords, and get on with his life. I was glad to see that he agreed. The last email he sent was brief, effectively saying \"I'll drop it this time. Don't hack me again.\" Not long after\u2014some time between December 31, 2003 and February 6, 2004 \u2014Stephen restructured his website, taking down the insecure project-management service altogether, and rearranging existing articles and projects to fill the space. I never heard from him again, but I never forgot about Stephen, nor about ScriptSharks. My experience with him encouraged me to keep learning, keep hacking, and keep working to improve security for everyone. Though he never knew it, Stephen had a significant impact on my life. Retrospect Over the years that followed, I checked in on ScriptSharks now and then. I watched as the site evolved, though activity dwindled. Stephen's last major revision to the site was around December 3, 2004 , after which point he only updated the site a few times, usually to update the copyright date . In 2007, Stephen stripped the news section from his site . In 2011 , the site was host to some Japanese domain-parking page. In 2013 it appeared that ScriptSharks may make a comeback, but in 2016 the site went offline, never to return. Around that time, I was working as a long-haul trucker, making deliveries coast-to-coast. Despite my decades-long passion for coding and hacking, I had never considered myself good enough to \"go pro.\" But in my down-time on the road, I connected with a group of hackers online, many of whom worked in the industry. After observing my skills, they urged me to pursue a career as a penetration tester. In 2019, I left trucking and obtained my OSCP . In 2020, I was hired as an entry-level security analyst. Before long, I was teaching new analysts about pentesting methods and techniques. Each time I taught a team about SQLi, I would tell them the story of ScriptSharks.com, and how Stephen and his website had inspired me. As analysts, my students had been taught \"zero trust,\" and were encouraged to fact-check everything. My story was no exception. This is how, in 2021, I discovered that Stephen had passed away the previous year. One of my students, Googling for Stephen's name, found his obituary on a local news website. I was saddened at the news. While I had never known Stephen personally, I had thought about him often. It was odd, feeling such a connection with someone I barely knew. Rebirth In 2022, thinking back on Stephen's passing, I wondered: Who owns ScriptSharks.com now? I assumed it would have been bought up right away, but I was wrong. When I looked, the domain was for sale! So I bought it. I didn't want it to fall in the hands of a domain-squatter with no appreciation for the site's history. I wanted to do something useful with it. Something that would respect the site's history, while taking it in a new direction. I took a page from Stephen's book. I decided to channel my passion for malware and security into ScriptSharks.com, sharing my knowledge and experience with the world, just as Stephen had done.","title":"ScriptSharks Origins"},{"location":"0xFF%20About/FD%20Origins/#prologue","text":"Back in 2001, I was a punk-ass wannabe hacker in high school. I'd been writing software for about six years, and after watching a PBS Frontline Documentary on hackers , I became obsessed with the subject. I collected every scrap of data I could find, from low-bar \"script kiddie\" hack-tools to sophisticated exploitation whitepapers. I read books and 'zines (like 2600 and PHRACK ), watched videos, and infected my parents' PC with more malware than I care to admit. I learned about hacker history back to the '60s, about their culture and communities, and about famous groups like the Masters of Deception and the Legion of Doom (of the alleged \" Great Hacker War \"). I was insatiable.","title":"Prologue"},{"location":"0xFF%20About/FD%20Origins/#attack","text":"","title":"Attack"},{"location":"0xFF%20About/FD%20Origins/#preparation","text":"(MITRE: T1593.002 ) In 2003, after learning about SQL Injection (SQLi), I was eager to practice what I'd learned. Back then, we didn't have sites like HackTheBox providing practice labs. Even HackThisSite was new, and was not well-known. Hackers had two choices: either get legal access to test hardware, or practice your skills \"in the wild.\" I was too broke to afford my own computer, let alone to buy a spare PC for \"target practice,\" and I didn't know any other hackers IRL. I decided to take the risk and practice on live targets. (As a kid, rational thinking and sound judgment were not my strong suits.) I used my Google-fu to search for vulnerable websites. I did a basic inurl:login.php search, and among the results, I found a link to scriptsharks.com . On visiting the site, I was excited to see that it was a site for programmers, including guides for PHP (which I was learning at the time). I decided to learn more about the site and its owner.","title":"Preparation"},{"location":"0xFF%20About/FD%20Origins/#reconnaissance","text":"(MITRE: T1589 , T1592.002 , T1594 , T1595 ) In 2000, Stephen \"Gabriel\" Lane (a.k.a. \"Calico Jack\")\u2014a motorcycle enthusiast and Senior Software Engineer for the New Orleans Saints \u2014created ScriptSharks.com as a place \" designed by a programmer for programmers ,\" where he could share tutorials, manage code projects, and provide other resources for programmers. He was fluent in numerous programming languages, and provided the full source code for dozens of programs he'd written, all for free. When I first started programming, back in 1995, I didn't have the Internet, and it was hard to find resources from which to learn. So I appreciated when successful people like Stephen shared their code and experience with the community. It seemed like he was living my dream, and he wasn't much older than me. From his website, I knew that Stephen used the Linux operating system, and designed websites using PHP, hosted with Apache and MySQL. (A typical LAMP stack .) I scanned the server's ports; 22 and 80 were open, but not much else. These ports were provided by OpenSSH and Apache , each fully up-to-date and patched.","title":"Reconnaissance"},{"location":"0xFF%20About/FD%20Origins/#initial-access","text":"Curiosity killed the cat. I'm glad I'm not a cat.","title":"Initial Access"},{"location":"0xFF%20About/FD%20Origins/#vuln-discovery","text":"(MITRE: T1588.006 ) After learning about Stephen and his technical knowledge, I was excited to explore the guides and source code provided on his site. My first stop was his guide to designing Sessions and Authentication Systems in PHP. My original goal was to practice SQLi attacks; it seemed likely that his site's auth code would be similar to that in his guide, which included SQL table layouts and code samples. If there was a vulnerability to be found, this was a good place to start hunting. Here's the session-checking code from Stephen's guide: function is_logged_in() { global $session_id; $select = \"SELECT Logged_In FROM Sessions WHERE Session_ID = '$session_id'\"; $result = mysql_db_query(\"Your DB\", $select) or die (mysql_error() . \"<HR>\\n$select\"); $db = mysql_fetch_array($result); return $db[Logged_In]; } And here's the logout code: session_start(); $session_id = session_id(); $insert = \"UPDATE Sessions SET Logged_In = '0' WHERE Session_ID = '$session_id'\"; $result = mysql_db_query(\"Your DB\", $insert) or die(mysql_error() . \"<hr />\\n\" . $insert); On reading the code, I realized the SELECT query was not being sanitized in the is_logged_in function, nor was the UPDATE query in the logout code. Theoretically, someone could de-authenticate any user they wished, or authenticate as any user, as long as they had some way to control the contents of the $session_id variable. Stephen had failed to sanitize database inputs in his guide; perhaps the same would be true of his login page?","title":"Vuln Discovery"},{"location":"0xFF%20About/FD%20Origins/#vuln-confirmation","text":"(MITRE: T1190 ) I decided to test the login for SQLi vulnerabilities. If the login.php script were written similar to the code from his tutorial, the code would likely include a SQL query something like this: $select = \"SELECT * FROM Users WHERE Username = '$username' AND Password = '$password' LIMIT 1\"; When called on the database, the $username and $password variables would be substituted for user-provided values. If I entered ' OR '1'='1 as both the username and password, the query would return the first user in the database. In most cases, the first user in the database is an admin. I did not actually expect my attack to work. Stephen's tutorial was intended to be basic, for the sake of learning. Considering the experience listed on his resum\u00e9, I expected the $username and $password variables to be sanitized before being passed to the database. So I was legitimately surprised when, upon executing my SQLi attack, I was successfully authenticated as the admin user, sglane . \"Holy crap,\" I thought. \"I got in!\" It was an incredible rush. I was simultaneously thrilled that my attack had worked, and terrified that I was going to get caught and arrested under the CFAA over a silly SQLi attack. (Funny how consequences only came to mind after I'd done the attack.) I hadn't caused any harm, though; and besides, this was Stephen's personal page, not attached to some hyper-litigious corporation. No harm, no foul, right? My excitement outweighed my fear. I decided to press further. By altering my query, I could skip the sglane user and authenticate as the second user in the database: Username: ' OR '1'='1 Password: ' OR '1'='1' AND Username != 'sglane Executing the attack, I was successfully authenticated as the second user in the database. From there it was a simple matter to enumerate all the users, one by one, simply adding a new Username != 'blah' clause to the query for each discovered user. Not bad for my first real-world attempt at SQLi!","title":"Vuln Confirmation"},{"location":"0xFF%20About/FD%20Origins/#account-compromise","text":"(MITRE: T1212 , T1552 , T1586 ) I was quite pleased with my accomplishment, but I was not done yet. What good are usernames without passwords? I searched around, unable to find an obvious way to retrieve the password from the database. I decided to try \"blind\" injection, enumerating the password character-by-character: Username: sglane Password: ' OR Password LIKE 'a% If the password started with a , I'd be authenticated. Otherwise, I'd be returned to the login screen, where I'd check every subsequent character until I found a match. Then I could start on the 2nd character, and so on. Once I'd uncovered the first password, I could move on to the second username, and repeat the process. Without automation, this process could take ages, but I was young and optimistic, and people didn't often use random 20-character passwords back then. Imagine my surprise when I found the complete password on the first attempt. After sending my injected credentials, the site rejected my attempt and returned me to the login page. However, I noticed that the login form had been re-populated upon my return, rather than preseting me with empty fields. \"Curious,\" I thought. \"What values are in the form fields?\" Viewing the page source code, I was appalled to discover that the login script, while refusing my attempt, had actually filled in the correct password for the specified user , taken straight out of the database. The password was right there, in clear-text, in the HTML of the page. It appeared that Stephen had intended the script to re-populate the form fields with the user's original input upon returning to the login page, like so: <?php $username = $_POST['username']; $password = $_POST['password']; $query = \"SELECT Username, Password FROM Users WHERE Username = '$username' AND Password = '$password' LIMIT 1\"; $result = mysql_db_query(\"Your DB\", $query) or die(mysql_error() . \"<hr />\\n\" . $query); $values = mysql_fetch_array($result); if($values['Username'] == $username && $values['Password'] == $password) { /* Redirect the user to the projects page. */ header(\"Location: projects.php\"); exit; } else { /* Show login fields again. */ ?> <form> <input type=\"text\" name=\"username\" value=\"<?php echo $username; ?>\" /> <input type=\"password\" name=\"password\" value=\"<?php echo $password; ?>\" /> <input type=\"submit\" value=\"Login\" /> </form> <?php exit; } ?> However, there was a bug in Stephen's code: rather than using the values pulled from $_POST , he used the values returned by the database: [...] $values = mysql_fetch_array($result); [...] <form> <input type=\"text\" name=\"username\" value=\"<?php echo $values['Username']; ?>\" /> <input type=\"password\" name=\"password\" value=\"<?php echo $values['Password']; ?>\" /> <input type=\"submit\" value=\"Login\" /> </form> [...] This is an easy mistake to make, and a difficult one to notice when troubleshooting. If my suspicion was correct, all I had to do was enter the correct username, along with an incorrect password, click \"Login,\" then (after the login was rejected) click \"Login\" again, and I'd be authenticated as whichever user I wished. I tried. It worked. 10 minutes later I had the passwords for every single user of ScriptSharks.com . I could log in as anyone, and see all the projects they had created on the site. But that wasn't enough. I was feeling euphoric, my confidence boosted by my success. \"How far can I go?\" I thought. \"Can I get root?\"","title":"Account Compromise"},{"location":"0xFF%20About/FD%20Origins/#password-reuse","text":"(MITRE: T1021.004 , T1078.003 ) With a list of valid account credentials, I turned my attention to the SSH server running on port 22 . These days we consider it bad practice to re-use passwords for multiple accounts. However, back in 2002, password reuse was still quite common, and sglane was no exception. I downloaded PuTTY , an SSH client for Windows, and connected to ScriptSharks.com's SSH server, using the credentials I had recovered for sglane . The credentials worked, and I was presented with a command prompt.","title":"Password Reuse"},{"location":"0xFF%20About/FD%20Origins/#privilege-escalation","text":"(MITRE: T1548.003 ) Having gained access to the system as sglane , I wanted to elevate my privileges to root . Since sglane was an admin, I could simply use sudo to obtain root access, providing credentials when prompted: sglane@webserver:~$ sudo su [sudo] password for sglane: root@webserver:/home/sglane# This worked; I was logged in as root .","title":"Privilege Escalation"},{"location":"0xFF%20About/FD%20Origins/#discovery","text":"(MITRE: T1003.008 , T1518 , T1083 , T1087.001 , T1552.001 ) After obtaining root access, I explored the system further. Reading the /etc/passwd file revealed the www-data account, which is the default account used by the Apache web server. (I could have also dumped the contents of /etc/shadow to see the password hashes for other accounts, but I did not have access to a password-cracking utility like John the Ripper at the time, so I left the hashes alone.) Looking in the /var/www directory (the default Apache webroot at the time), I discovered that scriptsharks.com had its own subdirectory, along with three others*: root@webserver:/home/sglane# ls -lh /var/www total 16K drwxr-xr-x 2 root root 4.0K Aug 9 18:15 onlineshop.com drwxr-xr-x 2 root root 4.0K Dec 30 2001 phpmyadmin drwxr-xr-x 2 root root 4.0K May 12 11:05 retailstore.com drwxr-xr-x 2 root root 4.0K Apr 19 05:02 scriptsharks.com * Note: I have long forgotten the domains for the two online shops Stephen managed, so I've used onlineshop.com and retailstore.com as generic substitutions. Stephen was using one server to host ScriptSharks and two online retail stores, as well as the phpMyAdmin web-based MySQL administration tool. Browsing to the scriptsharks.com directory, I found the site's PHP source code, which included database connection credentials. The credentials appeared to be site-specific, with ScriptSharks and the online stores each using a separate account. However, upon visiting the phpMyAdmin service hosted on the website, I was able to authenticate as sglane using the password I'd recovered previously, and was able to access the databases for all three sites.","title":"Discovery"},{"location":"0xFF%20About/FD%20Origins/#collection","text":"(MITRE: T1005 , T1560.001 ) These databases included tables for user accounts, product information, customer orders, and more. They included cleartext usernames, emails and passwords for all accounts on all three sites, as well as details for every order placed on the two retail sites, including the customer's name, shipping address, and credit card information. If a malicious hacker got access to these records, it could cause serious trouble for Stephen and his online businesses. Fortunately, my motivations were intellectual, not material; I had no interest in abusing the data. Quite the opposite! Following the discovery, I knew I had to talk to Stephen about securing his websites. My predicament was this: How do I reveal the vulnerabilities in Stephen's websites so he'll take me seriously, without compromising system security, and without getting arrested for computer crimes? At the time, the concept of Coordinated Vulnerability Disclosure was not yet widely known, despite the fact that vulnerability disclosure had been a subject of heated debate since the 1800s . I weighed my options: If I claimed I had hacked his site without providing proof, he would dismiss my claims. What proof would suffice? A dump of the database would be sufficient; it would demonstrate that sensitive data was accessed, giving credibility to my claims. So I used mysqldump to export all databases to a single file: root@webserver:/home/sglane# mysqldump --all-databases -u sglane -p secretpassword > /home/sglane/databases.sql The resulting file was quite large, so I compressed it with zip , encrypting the contents with a password\u2014the same password used to authenticate with the sglane account: root@webserver:/home/sglane# zip -p secretpassword databases.zip databases.sql I had my proof; now I needed to consider how to provide it. Malicious attackers would simply exfiltrate the file, eager to sell the data to credit fraudsters or cash-in themselves. However, I did not want the data to leave the system; not only would this look bad for me\u2014committing actual data theft would undermine any ethical defense I could build\u2014but it would also be a security risk for Stephen and his business. As it stood, the only way to steal the data would be to attack Stephen's systems. But if the same data were also on my own system or stored on the 'net somewhere, then the data would be at even greater risk of compromise simply by existing in multiple places. Rather than exfiltrate the data prior to disclosure, I simply left the encrypted databases.zip file in Stephen's home directory, and deleted the original databases.sql dump file. Then I began drafting an email, letting Stephen know I had discovered vulnerabilities on his server, and had left the databases.zip file in his home directory as proof\u2014encrypted with his own secret password. This way, I didn't have to transmit the password via email; I could simply say \"use the same password you use everywhere else.\" Using his own password to encrypt the dump file provided additional proof of compromise.","title":"Collection"},{"location":"0xFF%20About/FD%20Origins/#impact","text":"(MITRE: T1485 , T1489 , T1491 , T1499 , T1529 , T1531 , T1561 , T1565.001 ) While my intentions were never malicious, I was sure to outline some of the risks inherent in the vulnerabilities I'd discovered. For example, there was the obvious risk of credit card fraud and identity theft from the customer data, but that was just the tip of the iceberg. With access to the database, attackers could modify data. They could delete legitimate orders, or lock people out of their accounts. They could alter orders, rerouting legitimate purchases to the attackers' address. They could change prices, alter inventory levels, or double-charge customers. They could create new orders, mark them as paid but not shipped, and obtain free products from Stephen's stores. Or they could mark products as returned, but not yet refunded, and steal money. Looking beyond the database, it would also be possible for attackers to deface Stephen's websites, alter their source code, host and transmit malicious code or other illicit data, use the site to conduct a phishing attack, and even use the site as a C2 server for a malware botnet. If they're feeling destructive, attackers could use sudo rm -rf / command to wipe the server's filesystem. Or a fork-bomb could cause the system to become non-responsive. Or, if they're feeling lazy, they could simply sudo shutdown -h now to take the server offline. But the impact wasn't limited to Stephen's systems. Stephen liked to re-use the same password across multiple accounts, and he wasn't alone. Doubtless many of his websites' users did the same. With access to the database of usernames and their associated email addresses and passwords, attackers could abuse this habit to gain unauthorized access to the external email accounts of Stephen's users. With this access, users could potentially defraud those users further, stealing sensitive data, gaining access to other accounts and services (such as online banking), and even using their legitimate email accounts for phishing attacks. The possibilities were endless! And I made sure Stephen knew about them.","title":"Impact"},{"location":"0xFF%20About/FD%20Origins/#aftermath","text":"After composing my email to Stephen, the adrenaline from my exploits had faded, and the reality of the situation began to set in. In my excitement and curiosity, I hadn't given much thought to the consequences of my actions. After writing about all the ways people might exploit Stephen's websites, I realized the risk I was taking, and considered whether to send the email or just wipe my tracks, deleting all evidence of my intrusion and pretending I'd never found the site. While the \"wipe my tracks\" option looked appealing, my decision was influenced by two core assumptions: Everyone is smarter than me. Second, I assume I'm never the first to discover anything. If I tried to cover my tracks, Stephen would find some logfile or other overlooked evidence of my intrusion. Even the act of covering one's tracks creates more tracks. Assuming that Stephen was smarter than me, I could not hope to hide my intrusion. I would be caught, one way or another. But what if I knew I wouldn't get caught? I could still walk away as if I had never found the site, right? This is where the 2nd assumption comes in. Having discovered these vulnerabilities in Stephen's websites, I had to assume that someone else had discovered them first. This presented an ethical dilemma: Could I ignore the vulnerabilities, knowing that someone else could already be abusing them? Consider the following (hypothetical) scenario: Say you're a tourist visiting the Eiffel Tower, and while leaning against the rail to snap a photo, you accidentally dislodge the railing. Looking at the damage, you realize that the rail could easily fall off, and if someone were to lean on it, they could potentially fall to their death. If you report the broken railing, you might be accused of causing the damage. But if you don't report the damage, someone could get hurt or die. Therefore, despite the personal risk, the only ethical option would be to report the faulty railing, so that it could be repaired, and nobody would get hurt. Likewise, despite the personal risk inherent in disclosure, I felt I could not ethically ignore the vulnerabilities in Stephen's websites, knowing that they could lead to great harm to Stephen and his users.","title":"Aftermath"},{"location":"0xFF%20About/FD%20Origins/#disclosure","text":"My heart raced as I clicked \"send\" on the email. Shortly after, the bell rang for lunch. As I ate, I considered the very real possibility that I could be arrested for computer crimes. Despite my intentions, and my efforts to alert Stephen to the vulnerabilities in his systems, I could still go to jail. I had heard of minors being arrested and tried as adults. How would I survive incarceration? How would I explain this to my parents? My actions were indelible. The ball was in Stephen's court. All I could do was wait. Suffice to say, it was a very anxious lunch. Upon my return, I checked my inbox, and found an email from Stephen. He was, understandably, irate. He'd been having a pretty good day until I came along. Now he had a security incident on his hands, which could impact his reputation and his career. He felt endangered, and reacted defensively, threatening litigation against me.","title":"Disclosure"},{"location":"0xFF%20About/FD%20Origins/#remediation","text":"It appeared my worst fears were coming true. Still, I felt disclosure was the right course of action. I explained as much in my response, and offered my advice on how to fix the vulnerabilities and improve his code security. I also encouraged him to implement better password hygeine, both in his databases and with his personal accounts. Finally, I reminded him of a few important details which, I hoped, would dissuade legal recourse: I had taken no harmful actions on his system, and had not only disclosed the vulnerabilities, but provided solutions. As a minor, I would likely receive a lighter sentence than an adult in my position. At least one of the web-shops Stephen operated was for a business based in California. California law requires businesses to notify users whose unencrypted personal information may have been acquired by an unauthorized person. If Stephen took me to court for unauthorized access, he'd force the businesses whose websites he hosted to disclose the breach to their customers. This would cause a pile of problems for Stephen and his business clients. The businesses would suffer financial losses, and Stephen would incur damage to his reputation and career. It seemed like a lot of unnecessary hassle, from my perspective, when instead Stephen could simply fix the bugs, change his passwords, and get on with his life. I was glad to see that he agreed. The last email he sent was brief, effectively saying \"I'll drop it this time. Don't hack me again.\" Not long after\u2014some time between December 31, 2003 and February 6, 2004 \u2014Stephen restructured his website, taking down the insecure project-management service altogether, and rearranging existing articles and projects to fill the space. I never heard from him again, but I never forgot about Stephen, nor about ScriptSharks. My experience with him encouraged me to keep learning, keep hacking, and keep working to improve security for everyone. Though he never knew it, Stephen had a significant impact on my life.","title":"Remediation"},{"location":"0xFF%20About/FD%20Origins/#retrospect","text":"Over the years that followed, I checked in on ScriptSharks now and then. I watched as the site evolved, though activity dwindled. Stephen's last major revision to the site was around December 3, 2004 , after which point he only updated the site a few times, usually to update the copyright date . In 2007, Stephen stripped the news section from his site . In 2011 , the site was host to some Japanese domain-parking page. In 2013 it appeared that ScriptSharks may make a comeback, but in 2016 the site went offline, never to return. Around that time, I was working as a long-haul trucker, making deliveries coast-to-coast. Despite my decades-long passion for coding and hacking, I had never considered myself good enough to \"go pro.\" But in my down-time on the road, I connected with a group of hackers online, many of whom worked in the industry. After observing my skills, they urged me to pursue a career as a penetration tester. In 2019, I left trucking and obtained my OSCP . In 2020, I was hired as an entry-level security analyst. Before long, I was teaching new analysts about pentesting methods and techniques. Each time I taught a team about SQLi, I would tell them the story of ScriptSharks.com, and how Stephen and his website had inspired me. As analysts, my students had been taught \"zero trust,\" and were encouraged to fact-check everything. My story was no exception. This is how, in 2021, I discovered that Stephen had passed away the previous year. One of my students, Googling for Stephen's name, found his obituary on a local news website. I was saddened at the news. While I had never known Stephen personally, I had thought about him often. It was odd, feeling such a connection with someone I barely knew.","title":"Retrospect"},{"location":"0xFF%20About/FD%20Origins/#rebirth","text":"In 2022, thinking back on Stephen's passing, I wondered: Who owns ScriptSharks.com now? I assumed it would have been bought up right away, but I was wrong. When I looked, the domain was for sale! So I bought it. I didn't want it to fall in the hands of a domain-squatter with no appreciation for the site's history. I wanted to do something useful with it. Something that would respect the site's history, while taking it in a new direction. I took a page from Stephen's book. I decided to channel my passion for malware and security into ScriptSharks.com, sharing my knowledge and experience with the world, just as Stephen had done.","title":"Rebirth"},{"location":"0xFF%20About/FE%20Changelog/","text":"Version 0.2.1 Added \"Millenial Malware\" section. This covers the 00s. Version 0.2.0 Added \"ScriptSharks Origins\" article to the \"About\" section. Updated project organization. Version 0.1.4 Fixed a typo in the \"Malware Explosion\" section. Added \"Polymorphs, Macros and RATs! (Oh My!)\" section. This covers the 90s. Version 0.1.3 Added \"Malware Explosion\" section. This covers the 80s. Version 0.1.2 Expanded \"In the Beginning\" section. Added \"Wabbit\" and \"Animal.\" Cited Wikipedia in the Introduction. Included link for reporting issues. Older Versions 0.1.* 0.1.1 Fixed bugs. Updated changelog organization. 0.1.0 Created history section. Updated project organization. 0.0.* 0.0.1 Initial content and configuration.","title":"Changelog"},{"location":"0xFF%20About/FE%20Changelog/#version-021","text":"Added \"Millenial Malware\" section. This covers the 00s.","title":"Version 0.2.1"},{"location":"0xFF%20About/FE%20Changelog/#version-020","text":"Added \"ScriptSharks Origins\" article to the \"About\" section. Updated project organization.","title":"Version 0.2.0"},{"location":"0xFF%20About/FE%20Changelog/#version-014","text":"Fixed a typo in the \"Malware Explosion\" section. Added \"Polymorphs, Macros and RATs! (Oh My!)\" section. This covers the 90s.","title":"Version 0.1.4"},{"location":"0xFF%20About/FE%20Changelog/#version-013","text":"Added \"Malware Explosion\" section. This covers the 80s.","title":"Version 0.1.3"},{"location":"0xFF%20About/FE%20Changelog/#version-012","text":"Expanded \"In the Beginning\" section. Added \"Wabbit\" and \"Animal.\" Cited Wikipedia in the Introduction. Included link for reporting issues.","title":"Version 0.1.2"},{"location":"0xFF%20About/FE%20Changelog/#older-versions","text":"0.1.* 0.1.1 Fixed bugs. Updated changelog organization. 0.1.0 Created history section. Updated project organization. 0.0.* 0.0.1 Initial content and configuration.","title":"Older Versions"},{"location":"0xFF%20About/FF%20License/","text":"This work is licensed under a Creative Commons Attribution 4.0 International License . The author has granted others the freedom to share and adapt this work as long as they respect the terms of the aforementioned license, as detailed in the official text of the license .","title":"License"}]}